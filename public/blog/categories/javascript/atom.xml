<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Madole's Ramblings]]></title>
  <link href="http://madole.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://madole.github.io/"/>
  <updated>2014-07-28T08:04:44+10:00</updated>
  <id>http://madole.github.io/</id>
  <author>
    <name><![CDATA[Andrew McDowell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript interview questions]]></title>
    <link href="http://madole.github.io/blog/2014/07/19/javascript-interview-questions/"/>
    <updated>2014-07-19T18:29:09+10:00</updated>
    <id>http://madole.github.io/blog/2014/07/19/javascript-interview-questions</id>
    <content type="html"><![CDATA[<h2>Javascript Interview Questions</h2>

<p>I was asked recently by a friend of mine to come up with a list of interview questions that you can get asked during
a Javascript interview. I looked by to my last interview and came up with a few topics for him to brush up on.
I thought I&rsquo;d write them down so others might make use of them. If you were asked anything I&rsquo;ve not included, let me
know in the comments section.</p>

<!--more-->


<p></p>

<p>We&rsquo;ll start easy&hellip;</p>

<h3>What is Javascript?</h3>

<p>Mozilla Developer Network describes Javascript as:</p>

<blockquote><p>JavaScriptÂ® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions,
most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js
or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic,and supports
object-oriented, imperative, and functional programming styles.</p></blockquote>

<p>The standards for Javascript are written in the ECMAScript documents. Currently we&rsquo;re on ES5 but ES6 has just been
locked down so I&rsquo;m looking forward to checking out some of the goodies it has to offer such as native promises and
modules and classes.</p>

<h3>What is variable scoping?</h3>

<p>Variable scoping in Javascript can get complicated so lets do some examples.</p>

<h4>Globally scoped variable</h4>

<p>```javascript
var a = 1;</p>

<p>function test () {</p>

<pre><code>console.log(a); //1
</code></pre>

<p>}
```</p>

<h4>Locally scoped variable</h4>

<p>```javascript
function test() {</p>

<pre><code>var a = 1;
console.log(a); //1
</code></pre>

<p>}
```</p>

<h4>Closure</h4>

<p>The return function still has access to the internal variable by trapping it in the closure.
This is one of the great features of closures. More on this later.</p>

<p>```javascript
var close = (function () {</p>

<pre><code>var a = 1;
return function () {
    console.log(a); //1
};
</code></pre>

<p>})();</p>

<p>close();
```</p>

<h4>Implicit Globals <em>WATCH OUT FOR THESE</em></h4>

<p>This is where you don&rsquo;t declare a variable but then set it, these automatically go into the global scope.
It is worth while checking for implicit globally scoped variables every now and again in your javascript
because they can cause issues where things don&rsquo;t seem to act like they should.</p>

<p>```javascript
function test() {</p>

<pre><code>a = 1;
</code></pre>

<p>}</p>

<p>console.log(a); //1
```</p>

<h2>What does variable hoisting mean in Javascript?</h2>

<p>Javascript has a way of hoisting variable declarations to the top of the function. This can produce some unexpected
results if you are not aware of it them.</p>

<p>```javascript</p>

<p>(function() {</p>

<pre><code>if(true) {
    var x = 5;
}
console.log(x) //5
</code></pre>

<p>})()</p>

<p>```</p>

<p>The above example is interpreted exactly the same as this</p>

<p>```javascript
(function() {</p>

<pre><code>var x; 
if(true) {
    x = 5;
}
console.log(x) //5
</code></pre>

<p>})()
```</p>

<p>Where this gets confusing is in an example like this</p>

<p>```javascript
var x = 100;</p>

<p>function test() {</p>

<pre><code>if(false) {
    var x = 199;
}
console.log(x); //undefined
</code></pre>

<p>}</p>

<p>test();
```
What&rsquo;s going on here? Well we&rsquo;ve declared x outside the function text and set it to 100.
Inside the test function, the interpreter has seen there&rsquo;s a variable declaration, ignored the fact that it
 is inside a code block and hoisted it to the top of the function scope. The condition is not met so x<br/>
 has not been set to 199 and remains to have a value of &lsquo;undefined&rsquo;</p>

<p>It is the same as writing</p>

<p>```javascript
var x = 100;</p>

<p>function test() {</p>

<pre><code>var x;
if(false) {
    x = 199;
}
console.log(x); //undefined
</code></pre>

<p>}</p>

<p>test();
```</p>

<h2>What is the difference between == and === in Javascript?</h2>

<p>== checks equality whereas === checks equality and type. What does this mean?</p>

<p>```javascript
//==</p>

<p> 3  == 3    //true
&lsquo;3&rsquo; == 3    //true
 3  == &ldquo;3&rdquo;  //true</p>

<p>//===
 3  === 3   //true
&lsquo;3&rsquo; === 3   //false
 3  === &ldquo;3&rdquo; //false
```</p>

<h2>What kind of conditional statements are available in Javascript</h2>

<h4>if statement</h4>

<p>```javascript
if (x === 1) {</p>

<pre><code>//...
</code></pre>

<p>}
```</p>

<h4>if else statement</h4>

<p>```javascript
if (x === 1) {</p>

<pre><code>//...
</code></pre>

<p>} else {</p>

<pre><code>//...
</code></pre>

<p>}
```</p>

<h4>if else if statement</h4>

<p>```javascript
if (x === 1) {</p>

<pre><code>//...
</code></pre>

<p>} else if(y === 1) {</p>

<pre><code>//...
</code></pre>

<p>}
```</p>

<h4>switch statement</h4>

<p>```javascript
switch (x) {</p>

<pre><code>case 1: 
    console.log('one');
    break;
case 2: 
    console.log('two');
    break;
case 3: 
    console.log('three');
    break;
default: 
    console.log('This is the default condition');
    break;
</code></pre>

<p>}
```</p>

<h2>What would the following if condition example check for</h2>

<p>```javascript
if (!condition) {</p>

<pre><code>//... 
</code></pre>

<p>}
```
This would satisfy if
condition===&lsquo;undefined&rsquo; or
condition===null  or
condition===0     or
condition===&ldquo;&rdquo;    or
condition===NaN   or
condition===false.</p>

<p>This is a common way of checking for null or undefined but you have to double check that your variable
would not ever be set to false or 0 because it will also satisfy.</p>

<h2>What kind of loops are available in Javascript?</h2>

<h4>for loop</h4>

<p>You can see in the second loop, we cache the length of the array so we don&rsquo;t need to calculate the length of the
array each iteration. Micro-performance improvement that can add up over time, although newer Javascript engines like
V8 will more than likely JIT compile for loops automatically into their most efficient form.</p>

<p>```javascript
for(var i=0; i&lt;arr.length; i++) {</p>

<pre><code>//do stuff
</code></pre>

<p>}</p>

<p>for(var i=0, l=arr.length; i&lt;l; i++) {</p>

<pre><code>//do stuff
</code></pre>

<p>}
```</p>

<h4>for in loop</h4>

<p>```javascript
for (var x in arr) {</p>

<pre><code>//do stuff
</code></pre>

<p>}
```</p>

<h4>while loop</h4>

<p>```javascript
while(x === true) {</p>

<pre><code>//do stuff
</code></pre>

<p>}
```</p>

<h4>do while loop</h4>

<p>NOTE: This does one full iteration before checking the condition
```javascript
do {</p>

<pre><code>//do stuff
</code></pre>

<p>} while (x === true)
```</p>

<h2>What different ways can you create an Array in Javascript?</h2>

<p>The following examples show you different ways to create an array in Javascript
```javascript
var arr1 = new Array();
arr1.push(&lsquo;Me&rsquo;);
arr1.push(&lsquo;You&rsquo;);
arr1.push(&lsquo;Them&rsquo;);</p>

<p>var arr2 = new Array();
arr2[0] = &lsquo;Me&rsquo;;
arr2[1] = &lsquo;You&rsquo;;
arr2[2] = &lsquo;Them&rsquo;;</p>

<p>var arr3 = new Array(&lsquo;Me&rsquo;, &lsquo;You&rsquo;, &lsquo;Them&rsquo;);</p>

<p>var arr4 = [];
arr4.push(&lsquo;Me&rsquo;);
arr4.push(&lsquo;You&rsquo;);
arr4.push(&lsquo;Them&rsquo;);</p>

<p>var arr5 = [];
arr5[0] = &lsquo;Me&rsquo;;
arr5[1] = &lsquo;You&rsquo;;
arr5[2] = &lsquo;Them&rsquo;;</p>

<p>var arr6 = [&lsquo;Me&rsquo;, &lsquo;You&rsquo;, &lsquo;Them&rsquo;]</p>

<p>```</p>

<h3>How do you write an immediately invoked function?</h3>

<p>If you were to write the following code, it would assign the function to the var addFirstFiveNumbers.
In order to access the return value, you would have to execute the function.</p>

<p>```javascript
var addFirstFiveNumbers = function() {</p>

<pre><code>var count = 0;
for(var i=0; i&lt;=5; i++) {
    count += i;
}
return count;
</code></pre>

<p>}</p>

<p>console.log(addFirstFiveNumbers()) //15
```
If you wanted the function to execute immediately and store the return value in the var instead of the function,
you use an immediately invoked function. To do this, wrap your function in parenthesis and put a set of empty
parenthesis after it</p>

<p>```javascript
var addFirstSixNumbers = (function(){</p>

<pre><code>var count = 0;
for(var j=0; j&lt;=6; j++) {
    count += j;
}
return count;
</code></pre>

<p>})();</p>

<p>console.log(addFirstSixNumbers); //21
```</p>

<h2>How can you handle errors in Javascript?</h2>

<h4>Try Catch statements</h4>

<p>These allow you to throw errors inside the try and catch them in the catch block</p>

<p>```javascript
try {</p>

<pre><code>//do stuff
throw 'My Error'
</code></pre>

<p>} catch(e) {</p>

<pre><code>console.log(e);
</code></pre>

<p>}
```</p>

<h4>Try Finally statements</h4>

<p>These allow your code to fail gracefully by performing some clean up task after your code has finished executing or failing.</p>

<p>```javascript
openMyFile();
try {</p>

<pre><code>//tie up the resource
writeTofile();
</code></pre>

<p>}
finally {</p>

<pre><code>//release the resource
closeMyFile();
</code></pre>

<p>}
```</p>

<h4>Try Catch Conditional statements &ndash; THESE ARE NON STANDARD (and do not work in V8)</h4>

<p>```javascript
try {</p>

<pre><code>//do stuff
myRoutine(); //may throw three exceptions
</code></pre>

<p>} catch(e if e instanceof TypeError) {</p>

<pre><code>//handle type errors
</code></pre>

<p>} catch(e if e instanceof RangeError) {</p>

<pre><code>//handle range errors
</code></pre>

<p>} catch(e if e instanceof EvalError) {</p>

<pre><code>//handle eval errors
</code></pre>

<p>} catch (e) {</p>

<pre><code>logMyErrors(e);
</code></pre>

<p>}
```</p>

<h2>How would you execute a function in 30 seconds time?</h2>

<h4>Set Timeout</h4>

<p>```javascript</p>

<p>var timeout = setTimeout(function(){</p>

<pre><code>//code to be executed in 30 seconds
</code></pre>

<p>}, 30000)</p>

<p>//To cancel this timeout
clearTimeout(timeout);
```</p>

<h2>How would you execute a piece of code every 10 seconds?</h2>

<h4>Set Interval</h4>

<p>```javascript
var interval = setInterval(function() {</p>

<pre><code>//Code to be executed every 10 seconds
</code></pre>

<p>},10000);</p>

<p>//To remove this setInterval
clearInterval(interval);
```</p>

<h2>Explain Inheritance in Javascript</h2>

<p>MDN explains:</p>

<blockquote><p>Inheritance is a way to create a class as a specialized version of one or more classes (JavaScript only supports
single inheritance). The specialized class is commonly called the child, and the other class is commonly called the
parent. In JavaScript you do this by assigning an instance of the parent class to the child class, and then
specializing it. In modern browsers you can also use Object.create to implement inheritance.</p></blockquote>

<h3>Difference between Object.create and the new operator</h3>

<p>Both are ways to inherit from a base class, but Object.create inherits from the prototype. What does this mean? Well lets
do an example.</p>

<p>```javascript
function Person() {</p>

<pre><code>this.species = 'human';
</code></pre>

<p>}</p>

<p>Person.prototype.speak = function () {</p>

<pre><code>console.log('Hello');
</code></pre>

<p>}</p>

<p>Person.prototype.sleep = function () {</p>

<pre><code>console.log('Snore...zzz');
</code></pre>

<p>}</p>

<p>var andrew = new Person();
console.log(andrew.species); //human
andrew.speak(); //Hello
andrew.sleep(); //Snore&hellip;zzz</p>

<p>var andy = Object.create(Person.prototype);
console.log(andy.species); //undefined
andy.speak(); //Hello
andy.sleep(); //Snore&hellip;zzz
```</p>

<p>Here, Andrew is an instance of the Person class and so has species set on it. Andy on the other hand has inherited
from the Person class&rsquo;s prototype <em>only</em> and so has access to the prototype functions of the Person class but
none of the attributes set on the class.</p>

<h2>What is the difference between .call() and .apply()</h2>

<p>At first you might think they do the same thing. Take a <em>this</em> arg and pass it to a function, lets see that
in action</p>

<p>```javascript
var car1 = {make: &lsquo;Vauxhall&rsquo;, model: &lsquo;Corsa&rsquo;, year: &lsquo;2005&rsquo;};
var car2 = {make: &lsquo;Bugatti&rsquo;, model: &lsquo;Veyron&rsquo;, year: &lsquo;2014&rsquo;};</p>

<p>var printMake = function () {</p>

<pre><code>console.log(this.make);
</code></pre>

<p>}</p>

<p>var printModel = function () {</p>

<pre><code>console.log(this.model);
</code></pre>

<p>}</p>

<p>printMake.call(car1);//Vauxhall
printMake.apply(car1);//Vauxhall</p>

<p>printMake.call(car2);//Bugatti
printMake.apply(car2);//Bugatti</p>

<p>printModel.call(car1);//Corsa
printModel.apply(car1);//Corsa</p>

<p>printModel.call(car2);//Veyron
printModel.apply(car2);//Veyron</p>

<p>```</p>

<p>Where .call() and .apply() differ is the arguments you pass after the <em>this</em> arg.</p>

<p>In a .call(), you pass your <em>this</em> arg
then followed by the args the function is expecting.</p>

<p>In a .apply(), you pass your <em>this</em> arg followed by an array containing the arguments to be passed which then get split
out into the function params.</p>

<p>Lets see these in action</p>

<p>```javascript</p>

<pre><code>var car1 = {make: 'Vauxhall', model: 'Corsa', year: '2005'};
var car2 = {make: 'Bugatti', model: 'Veyron', year: '2014'};


var udpateCar = function(make, model, year) {
    this.make = make;
    this.model = model;
    this.year = year;
};

udpateCar.call(car1, 'Vauxhall', 'Astra', '2014');
udpateCar.apply(car2, ['Mini', 'Cooper', '2014'] )

console.log(car1); //{ make: 'Vauxhall', model: 'Astra', year: '2014' }
console.log(car2); //{ make: 'Mini', model: 'Cooper', year: '2014' }
</code></pre>

<p>```</p>

<h2>How would you go about dealing with an asynchronous request?</h2>

<h4>Deferred promises</h4>

<p>jQuery and Q both provide a way to do promises and ECMAScript6 will provide a way to do native Javascript promises.</p>

<p>Lets look at the jQuery Deferred object.</p>

<p>```javascript
function asyncFunction() {</p>

<pre><code>var defer = $.Deferred();
$.ajax({
    url: 'http://getPerson.com/?gender=female'
    context: this
}).done(function (returnObj) {
    defer.resolve(returnObj);
}).fail(function () {
    defer.reject();
});
return defer.promise();
</code></pre>

<p>}</p>

<p>function myFunction() {</p>

<pre><code>var personPromise = asyncFunction();
personPromise.done(function (returnObj) { //executes when promise is resolved
        console.log(returnObj.name)
    });
personPromise.fail(function () { //executes when promise is rejected
        console.log('Failed to get the person');
    });
</code></pre>

<p>}</p>

<p>myFunction();
```</p>

<p>myFunction is calling the asyncFunction and getting a deferred promise back. When the promise
gets resolved after the ajax request returns, the done function will get executed. If the promise gets rejected, the fail
function will get executed.</p>

<p>These are useful when you are making calls out to a webservice for data.</p>

<h2>Some Javascript shortcuts/hacks</h2>

<h3>Ternary operators</h3>

<p>These are great for situations where you want to assign a var based on a condition.</p>

<p>test ? expression1 : expression2</p>

<p>You can play with these here at <a href="http://jsfiddle.net/madole404/KdnJ7/">JSFiddle</a></p>

<p>```javascript
function returnTrueIfLessThanTen(checkVal) {</p>

<pre><code>var returnVal = (checkVal &lt; 10) ? true : false;
return returnVal;
</code></pre>

<p>}
console.log(returnTrueIfLessThanTen(9)); //true
console.log(returnTrueIfLessThanTen(29)); //false
```</p>

<h3>Using bitwise operators in place of Math.floor</h3>

<p>You can have a play with these and see them in action at <a href="http://jsfiddle.net/madole404/g34mL/">JSFiddle</a></p>

<h5>Why use them?</h5>

<p> They are marginally faster than Math.floor as we can see from this <a href="http://jsperf.com/math-floor-vs-math-round-vs-parseint/70">JSPerf</a></p>

<h5>Why not to use them?</h5>

<ul>
<li>They reduce clarity in your coding</li>
<li>They only work 32-bit signed integers</li>
<li>They work by truncating the decimal rather than working out what the floor is</li>
<li>You might not get the outcome you are expecting

<ul>
<li>Math.floor(NaN) === NaN</li>
<li>(NaN >> 0) === 0</li>
</ul>
</li>
</ul>


<p>```javascript
var result = 84.3/12.5;
console.log(result); //6.744</p>

<p>var round = Math.round(84.3/12.5);
console.log(round) //7</p>

<p>var floor = Math.floor(84.3/12.5);
console.log(floor) //6</p>

<p>var doubleNeg = ~~(84.3/12.5);
console.log(doubleNeg) //6</p>

<p>var bitwiseRight = (84.3/12.5) >>0;
console.log(bitwiseRight) //6</p>

<p>var bitwiseLeft = (84.3/12.5) &lt;&lt; 0;
console.log(bitwiseLeft) //6</p>

<p>var bitwiseOr = (84.3/12.5) | 0;
console.log(bitwiseOr); //6</p>

<p>var parseInteger = parseInt(84.3/12.5);
console.log(parseInteger) //6</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Toolbox]]></title>
    <link href="http://madole.github.io/blog/2014/07/16/javascript-toolbox/"/>
    <updated>2014-07-16T19:05:22+10:00</updated>
    <id>http://madole.github.io/blog/2014/07/16/javascript-toolbox</id>
    <content type="html"><![CDATA[<p>I write javascript most days and have done so for a few years now. I still find new tools, websites, frameworks and
ways to do things. I thought I&rsquo;d write them down and get the list online as it may help other people discover some
useful tools of the trade.</p>

<!--more-->


<p></p>

<h2>IDEs and editors</h2>

<h3>Sublime Text 2</h3>

<p>Your go to text editor. When you download it fresh, it won&rsquo;t feel like much but once you load it full of plugins
that you can find at <a href="https://sublime.wbond.net/">Package Control</a>. It becomes a great tool for knocking up javascript. I&rsquo;ll do another post on my sublime 2
 plugins later.</p>

<p><a href="http://www.sublimetext.com/">Sublime Text 2</a></p>

<h3>Sublime Text 3</h3>

<p>The younger more unstable brother of Sublime Text 2. I use this even though it&rsquo;s still in beta because it allows
JSGutter to run Node.js and jshint my code in real time instead of just on every save or load.</p>

<p><a href="http://www.sublimetext.com/3">Sublime Text 3</a></p>

<h3>Webstorm</h3>

<p>I used Webstorm in a project in my previous job, and I&rsquo;m not sure whether it was my laptop being substandard or Webstorm
being a resource hungry beast but it was slow and sluggish for a JS IDE. But, fast forward a year, I&rsquo;m not sure if it
got more efficient or my machine upgrades provide it with the juice it needs but WHOAAA! I&rsquo;m running its on both Fedora 20
and OSX with i5 and i7 processors and 16Gb ram in each, it&rsquo;s the tool I was expecting it to be. Fast, great linting,
unmatched intellisense. It&rsquo;s a great product. Sometimes you can get the feeling it&rsquo;s got too much on screen but it&rsquo;s
just a case of finding the configuration that works for you. It is loaded with keyboard shortcuts so my advice is to
print out a Webstorm cheatsheet and tack it to the wall beside your screen. When you start storing them in muscle
memory, you&rsquo;ll barely even need a mouse in your life! Check out the <a href="http://www.jetbrains.com/webstorm/download/">30 day trial</a>!</p>

<p><a href="http://www.jetbrains.com/webstorm/">Webstorm</a></p>

<h3>Atom</h3>

<p>This is worth a mention and with a tagline of &ldquo;The hackable text editor&rdquo; its definitely one to keep an eye on. A Javascript
editor written in Javascript! It&rsquo;s being developed by GitHub. Imagine Sublime Text that you can write your own plugins in
Javascript! Cool&hellip;eh? I got on the beta trial a few months ago and it seemed a bit unstable but definitely a watch
this space product! You can check out the <a href="https://github.com/atom">github page</a> where the code is hosted, I was
suprised to find it written in CoffeeScript. I&rsquo;m quite happy about this as I&rsquo;ve just made the move to CoffeeScript myself.</p>

<p><a href="http://atom.io">Atom.io</a></p>

<h2>Online JavaScript Playgrounds</h2>

<h3>Jsfiddle.net</h3>

<p>I like this webapp to test out exactly what happens in a particular scenario that you&rsquo;re not quite sure what way
javascript will react. Yesterday, I had a case during a code review I was doing where a setInterval as being assigned
to a var and a clearInterval was being called a little later, but a deviation in the code path caused a second
setInterval to be assigned to that same var. I had suspected then that the var would only hold reference to the
last one and therefore keep the first one ticking on but just wanted to make sure. A few seconds later I confirmed
it and dinged the commit explaining why. It&rsquo;s also useful that you can send your JSFiddle to the person to explain
what you mean.</p>

<p><a href="http://jsfiddle.net">JSFiddle</a></p>

<h3>JSbin.com</h3>

<p>Exactly the same idea as JSFiddle except I like the fact that it live reloads so you don&rsquo;t have to click a run button
each time. Just write your JS and watch your logs appear  in the console or output window</p>

<p><a href="http://jsbin.com">JSBin</a></p>

<h3>Codepen.io</h3>

<p>A very clean interface that does much the same as the above two. I get the feeling this is more for mocking up full html
pages rather than just knocking out a bit of JavaScript though. Some very interesting demos on the &ldquo;Picked Pens&rdquo; section
of the homepage</p>

<p><a href="http://codepen.io/">Codepen.io</a></p>

<h2>Performance</h2>

<h3>JSPerf.com</h3>

<p>Great website for comparing the performance of different ways to do the same thing. For instance, whether an
incrementing for loop is quicker than a decrementing for loop or while loop or a for in loop. My team mate did a
blog post about this a few weeks ago
(<a href="http://www.christopherlaughlin.co.uk/2014/06/29/javascript-loop-performance/">For Loop Performance</a>).
These are only micro-performance improvements, but in work, I write
javascript to run in a browser on embedded devices with limited resources so every little helps!</p>

<h2>Podcasts</h2>

<h3>Javascript Jabber</h3>

<p>My favorite Javascript podcast. They do weekly shows and have people on who are either working for some of the top
Javascript companies or are big contributors to the open source JS community.</p>

<p><a href="http://javascriptjabber.com/">javascriptjabber.com/</a></p>

<h3>Frontside the podcast</h3>

<p>I&rsquo;ve just started listening to this podcast and they seem to have a ton of interesting topics of discussion.
Worth checking out.</p>

<p><a href="https://frontsidethepodcast.simplecast.fm/episodes">Frontside the podcast</a></p>

<h3>Node up (&amp; Node down)</h3>

<p>My teammate at CAM tech just told me about these podcasts, apparently NodeUp is an already established podcast and
they&rsquo;re starting a NodeDown for the Southern Hemisphere. I&rsquo;ll be checking these out. You should too!</p>

<p><a href="http://nodeup.com/">http://nodeup.com/</a></p>

<h2>Meetups</h2>

<p>I live in Sydney and there are many JavaScript meetups. Just checkout <a href="http://www.meetup.com/">Meetup.com</a>.
I&rsquo;ve been meaning to get myself to <a href="http://www.sydjs.com/">SydJS</a> and the Sydney NodeJs meetups.
Someday I&rsquo;ll get there.</p>

<h3>MongoDb Meetup</h3>

<p>MongoDb meetup is one I attend when I can. We use MongoDb in our side project so it&rsquo;s interesting to listen to case
studies and experts talk about it. Also, Stennie (<a href="http://twitter.com/stennie">@stennie</a>) and the rest of the Mongo
crew are super friendly and always willing to help out if you have any issues with your Mongo implementation.</p>

<p><a href="https://www.google.com.au/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CBwQFjAA&amp;url=http%3A%2F%2Fwww.meetup.com%2FSydney-MongoDB-User-Group%2F&amp;ei=q0jGU8SNNYui8AWTuYDICA&amp;usg=AFQjCNG382vYUazai3it5h71d3OhSurkVA&amp;sig2=cI8e_dwfmgOW-cGpL2u4Ig">MongoDb Sydney User Group</a></p>

<h2>Books</h2>

<h3>Javascript: The Good Parts &ndash; Douglas Crockford &ndash; O'Reilly</h3>

<p>The first Javascript book I ever read. Takes you through all the concepts and topics you need to know about to get
on your way to being a great Javascript programmer.</p>

<p><a href="http://shop.oreilly.com/product/9780596517748.do">JavaScript: The Good Parts</a></p>

<h3>Clean Code &ndash; Robert C. Martin</h3>

<p>This is actually a book written about Java but I constantly refer to it no matter what language I write in which is
why I&rsquo;m including it in my list. It takes you through examples of bad code and explains why they are bad and how to
make them better by transforming them into great looking, readable code. Because after all, 99% of the time, you&rsquo;re
not writing code for you too look at, you&rsquo;re writing code which other people need to be able to maintain with ease.</p>

<p><a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code &ndash; Amazon</a></p>

<h3>CoffeeScript Cookbook</h3>

<p>Just started reading through this online when I was learning CoffeeScript last week. Some great examples well laid
out of all the different constructs and how they translate into Javascript. Along with the <a href="http://coffeescript.org/">CoffeeScript website</a>,
you should be up and running in CoffeeScript in no time.</p>

<p><a href="http://coffeescriptcookbook.com/">CoffeeScript Cookbook</a></p>
]]></content>
  </entry>
  
</feed>
