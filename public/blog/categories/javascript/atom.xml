<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Madole's Ramblings]]></title>
  <link href="http://madole.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://madole.github.io/"/>
  <updated>2014-11-20T22:25:11+11:00</updated>
  <id>http://madole.github.io/</id>
  <author>
    <name><![CDATA[Andrew McDowell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JSFiddle - Firebug Lite]]></title>
    <link href="http://madole.github.io/blog/2014/11/20/jsfiddle-firebug-lite/"/>
    <updated>2014-11-20T20:45:26+11:00</updated>
    <id>http://madole.github.io/blog/2014/11/20/jsfiddle-firebug-lite</id>
    <content type="html"><![CDATA[<p>I recently discovered a cool feature in JSFiddle which changed the way I use it.</p>

<p>Until now, I&rsquo;ve been hopping on to JSFiddle to test out little bits of code and logging out to the console.</p>

<p>If you&rsquo;re like me, you&rsquo;ll be familiar with having Chrome Dev Tools open to view your console logs.</p>

<p><img src="/images/devToolsConsoleLog.png" width="700" title="" ></p>

<!--more-->


<p>This can be a bit of a pain to have to open every time, and especially for showing your JSFiddle to other people when you
send them a link, they have to open their Dev Tools up too.</p>

<h4><em>Firebug Lite to the rescue</em></h4>

<p>I came across a stack overflow where the user gave an answer and link to a JSFiddle with Firebug Lite enabled.</p>

<p>I now use it every single time I use JSFiddle.</p>

<p>Here&rsquo;s how to enable it.</p>

<p>First of all, write a line of code that logs to the console so you know it&rsquo;s worked at the end.</p>

<p><img src="/images/logToConsole.png" width="700" title="" ></p>

<p>Then in the Frameworks and Extensions section, add jQuery (edge) to the Fiddle.</p>

<p><img src="/images/addjQueryEdge.png" width="700" title="" ></p>

<p>It should look like this with a bunch of checkboxes you can choose from.</p>

<p><img src="/images/jQueryEdgeAdded.png" width="700" title="" ></p>

<p>Click Firebug Lite to add it to the Fiddle</p>

<p><img src="/images/chooseFirebug.png" width="700" title="" ></p>

<p>Finally, Run your JavaScript to see it logged out to the Firebug Lite Console in the output window.</p>

<p><img src="/images/loggedOut.png" width="700" title="" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cool Function.prototype.bind() quirk]]></title>
    <link href="http://madole.github.io/blog/2014/09/30/cool-function-dot-prototype-dot-bind-quirk/"/>
    <updated>2014-09-30T11:58:10+10:00</updated>
    <id>http://madole.github.io/blog/2014/09/30/cool-function-dot-prototype-dot-bind-quirk</id>
    <content type="html"><![CDATA[<p>Today I came up against a need to bind a parameter to a callback before passing it to a function. This is fine and a fairly normal thing to do.</p>

<p>However, the function that was receiving the callback was also passing a parameter to the callback.</p>

<p>I&rsquo;d not come up against this scenario before so I asked a colleague what would happen, we came up with a list of 3 possibilities.</p>

<!--more-->


<p></p>

<ul>
<li> The function passing the parameter to the callback would overwrite the bound argument.</li>
<li> The bound argument would be the first parameter and the passed in argument would be the second.</li>
<li> The passed in argument would be the first parameter and bound argument would be the second.</li>
</ul>


<p>I headed over to JSFiddle.net to mock up a trivial example that would demonstrate my issue so I could see the outcome. I&rsquo;ve copied it below.</p>

<p>```javascript
function callbackToPass(first, second) {</p>

<pre><code>console.log(first);
console.log(second);
</code></pre>

<p>}</p>

<p>function funkyFunc(callback) {</p>

<pre><code>callback('is good for horses');
</code></pre>

<p>}</p>

<p>funkyFunc(callbackToPass);
//is good for horses
//undefined</p>

<p>funkyFunc(callbackToPass.bind(null, &lsquo;hay&rsquo;));
//hay
//is good for horses</p>

<p>```</p>

<p><a href="http://jsfiddle.net/madole404/zbLbLymt/1/">http://jsfiddle.net/madole404/zbLbLymt/1/</a></p>

<h4>Outcome:</h4>

<p>When you bind an argument to the callback, it binds it as the first parameter.
Then when you pass an argument to the same callback function when you are calling it, it becomes the secondary parameter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Patterns: Singleton]]></title>
    <link href="http://madole.github.io/blog/2014/08/18/patterns-singleton/"/>
    <updated>2014-08-18T13:21:18+10:00</updated>
    <id>http://madole.github.io/blog/2014/08/18/patterns-singleton</id>
    <content type="html"><![CDATA[<blockquote><p>The singleton pattern is a design pattern that restricts the instantiation of a class to one object.
This is useful when exactly one object is needed to coordinate actions across the system.
The concept is sometimes generalized to systems that operate more efficiently when only one object exists,
or that restrict the instantiation to a certain number of objects.
The term comes from the mathematical concept of a singleton.</p></blockquote>

<!--more-->


<p></p>

<h3>Features of the Singleton pattern</h3>

<ul>
<li>Lazy construction.

<ul>
<li>The singleton object is not created until it is needed to be used for the first time.</li>
</ul>
</li>
<li>The constructor is private so you can not build new instances of the object.</li>
<li>The constructor is only ever called by the getInstance function if the object does not already exist.</li>
</ul>


<h3>Code example</h3>

<p>A typical singleton pattern in JavaScript looks like this.</p>

<p>```javascript
(function () {
  &lsquo;use strict&rsquo;;
  var singletonDriver = (function () {</p>

<pre><code>var instance = null;

function init() {
  //private methods and variables
  var name = 'Wilson';
  var cars = ['Porche', 'Ferarri', 'Volvo'];

  function printCars() {
    console.log(cars);
  }

  return {
    // Public methods
    getName: function () {
      return name;
    },
    getCars: function () {
      return cars;
    },
    printCars: printCars
  };
}

return {
  getInstance: function () {
    if (!instance) {
      instance = init();
    }
    return instance;
  }
};
</code></pre>

<p>  })();</p>

<p>  // Usage:
  var driver1 = singletonDriver.getInstance();
  var driver2 = singletonDriver.getInstance();</p>

<p>  console.log(driver1 === driver2); //true
  console.log(driver1.getCars() === driver2.getCars()); // true
  console.log(driver1.getName()); //wilson
  console.log(driver2.getName()); //wilson
  driver1.printCars(); //[ &lsquo;Porche&rsquo;, &lsquo;Ferarri&rsquo;, &lsquo;Volvo&rsquo; ]
})();
```
Lets look at what we have created.</p>

<ul>
<li><p>An instance variable that is set to null, this will hold our instance of the singleton when
the getInstance function is called for the first time.</p></li>
<li><p>An init() function which will build our singleton. It can contain private and public variables and functions.</p></li>
<li><p>A public getInstance() function. This will return the instance if it already exists and or if it doesn&rsquo;t,
it will create it, set our instance variable and then return it.</p></li>
</ul>


<p>That&rsquo;s all there is to it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why you should not use var self = this]]></title>
    <link href="http://madole.github.io/blog/2014/08/08/why-you-should-not-use-var-self-equals-this/"/>
    <updated>2014-08-08T07:39:07+10:00</updated>
    <id>http://madole.github.io/blog/2014/08/08/why-you-should-not-use-var-self-equals-this</id>
    <content type="html"><![CDATA[<p>When trying to maintain context, like in a setTimeout, I&rsquo;ve seen lots code that resembles</p>

<blockquote><p>var self = this;</p></blockquote>

<p><em>self</em> is then used inside the timeout to execute the code within the scope of the parent function.</p>

<p>Self is a reserved word in the browser which is equal to Window in most browsers and therefore should not be
overwritten as it could cause confusion for someone thinking self is referring to the window object reference.</p>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window.self">https://developer.mozilla.org/en-US/docs/Web/API/Window.self</a></p>

<!--more-->


<p></p>

<p>self === window.self</p>

<blockquote><p>true</p></blockquote>

<p>self === window</p>

<blockquote><p>true</p></blockquote>

<h3>Screenshots</h3>

<h4>Mozilla Firefox</h4>

<p><img src="/images/firefoxSelf.jpg" width="700" title="" ></p>

<h4>Google Chrome</h4>

<p><img src="/images/chromeSelf.jpg" width="700"></p>

<h4>Apple Safari</h4>

<p><img src="/images/safariSelf.jpg" width="700"></p>

<p>In a lot of scenarios you can avoid this completely by refactoring your code to use private functions that are
always in scope. But in the scenarios where you can&rsquo;t avoid it, it&rsquo;s better to use a word like &ldquo;that&rdquo; which is
not reserved and is commonly used for this purpose, or using Function.prototype.bind to bind the context and
return a function.</p>

<h2>PROBLEM:</h2>

<p>```javascript</p>

<p>function MathPrint() {</p>

<pre><code>var x = 10;
var y = 100;

return {
    multiply: function (a, b) {
        return a * b;
    },
    printToConsole: function (text) {
        console.log(text);
    },
    printAndMultiplyAfterWait: function () {
        setTimeout(function () {
            this.printToConsole(this.multiply(x, y));
        }, 2000);
    }
};
</code></pre>

<p>}</p>

<p>var mathPrint = new MathPrint();</p>

<p>console.log(mathPrint.multiply(10, 5)); //50</p>

<p>mathPrint.printToConsole(2000); //2000</p>

<p>mathPrint.printAndMultiplyAfterWait(); //undefined is not a function
}</p>

<h2>```</h2>

<h2>BAD: </h2>

<p>```javascript</p>

<p>function MathPrint() {</p>

<pre><code>var x = 10;
var y = 100;
//self === window
return {
    multiply: function (a, b) {
        return a * b;
    },
    printToConsole: function (text) {
        console.log(text);
    },
    printAndMultiplyAfterWait: function () {
        var self = this; //self -&gt; function scope
        setTimeout(function () {
            self.printToConsole(self.multiply(x, y));
        }, 2000);
    }
};
</code></pre>

<p>}</p>

<p>var mathPrint = new MathPrint();</p>

<p>console.log(mathPrint.multiply(10, 5)); //50</p>

<p>mathPrint.printToConsole(2000); //2000</p>

<p>mathPrint.printAndMultiplyAfterWait(); //1000
```</p>

<hr />

<h2>GOOD: </h2>

<p>```javascript</p>

<p>function MathPrint() {</p>

<pre><code>var x = 10;
var y = 100;
return {
    multiply: function (a, b) {
        return a * b;
    },
    printToConsole: function (text) {
        console.log(text);
    },
    printAndMultiplyAfterWait: function () {
        var that = this;
        setTimeout(function () {
        that.printToConsole(that.multiply(x, y));
        }, 2000);
    }
};
</code></pre>

<p>}</p>

<p>var mathPrint = new MathPrint();</p>

<p>console.log(mathPrint.multiply(10, 5)); //50</p>

<p>mathPrint.printToConsole(2000); //2000</p>

<p>mathPrint.printAndMultiplyAfterWait(); //1000</p>

<p>```</p>

<hr />

<h2>GOOD &ndash; using Bind and Call</h2>

<p>```javascript
function MathPrint() {</p>

<pre><code>var x = 10;
var y = 100;
return {
    multiply: function (a, b) {
        return a * b;
    },
    printToConsole: function (text) {
        console.log(text);
    },
    printAndMultiplyAfterWait: function () {
        setTimeout(this.printToConsole.bind(this, this.multiply.call(this,x,y)),2000);
    }
};
</code></pre>

<p>}</p>

<p>var mathPrint = new MathPrint();</p>

<p>console.log(mathPrint.multiply(10, 5)); //50</p>

<p>mathPrint.printToConsole(2000); //2000</p>

<p>mathPrint.printAndMultiplyAfterWait(); //1000</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript interview questions]]></title>
    <link href="http://madole.github.io/blog/2014/07/19/javascript-interview-questions/"/>
    <updated>2014-07-19T18:29:09+10:00</updated>
    <id>http://madole.github.io/blog/2014/07/19/javascript-interview-questions</id>
    <content type="html"><![CDATA[<h2>Javascript Interview Questions</h2>

<p>I was asked recently by a friend of mine to come up with a list of interview questions that you can get asked during
a Javascript interview. I looked by to my last interview and came up with a few topics for him to brush up on.
I thought I&rsquo;d write them down so others might make use of them. If you were asked anything I&rsquo;ve not included, let me
know in the comments section.</p>

<!--more-->


<p></p>

<p>We&rsquo;ll start easy&hellip;</p>

<h3>What is Javascript?</h3>

<p>Mozilla Developer Network describes Javascript as:</p>

<blockquote><p>JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions,
most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js
or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic,and supports
object-oriented, imperative, and functional programming styles.</p></blockquote>

<p>The standards for Javascript are written in the ECMAScript documents. Currently we&rsquo;re on ES5 but ES6 has just been
locked down so I&rsquo;m looking forward to checking out some of the goodies it has to offer such as native promises and
modules and classes.</p>

<h3>What is variable scoping?</h3>

<p>Variable scoping in Javascript can get complicated so lets do some examples.</p>

<h4>Globally scoped variable</h4>

<p>```javascript
var a = 1;</p>

<p>function test () {</p>

<pre><code>console.log(a); //1
</code></pre>

<p>}
```</p>

<h4>Locally scoped variable</h4>

<p>```javascript
function test() {</p>

<pre><code>var a = 1;
console.log(a); //1
</code></pre>

<p>}
```</p>

<h4>Closure</h4>

<p>The return function still has access to the internal variable by trapping it in the closure.
This is one of the great features of closures. More on this later.</p>

<p>```javascript
var close = (function () {</p>

<pre><code>var a = 1;
return function () {
    console.log(a); //1
};
</code></pre>

<p>})();</p>

<p>close();
```</p>

<h4>Implicit Globals <em>WATCH OUT FOR THESE</em></h4>

<p>This is where you don&rsquo;t declare a variable but then set it, these automatically go into the global scope.
It is worth while checking for implicit globally scoped variables every now and again in your javascript
because they can cause issues where things don&rsquo;t seem to act like they should.</p>

<p>```javascript
function test() {</p>

<pre><code>a = 1;
</code></pre>

<p>}</p>

<p>console.log(a); //1
```</p>

<h2>What does variable hoisting mean in Javascript?</h2>

<p>Javascript has a way of hoisting variable declarations to the top of the function. This can produce some unexpected
results if you are not aware of it them.</p>

<p>```javascript</p>

<p>(function() {</p>

<pre><code>if(true) {
    var x = 5;
}
console.log(x) //5
</code></pre>

<p>})()</p>

<p>```</p>

<p>The above example is interpreted exactly the same as this</p>

<p>```javascript
(function() {</p>

<pre><code>var x; 
if(true) {
    x = 5;
}
console.log(x) //5
</code></pre>

<p>})()
```</p>

<p>Where this gets confusing is in an example like this</p>

<p>```javascript
var x = 100;</p>

<p>function test() {</p>

<pre><code>if(false) {
    var x = 199;
}
console.log(x); //undefined
</code></pre>

<p>}</p>

<p>test();
```
What&rsquo;s going on here? Well we&rsquo;ve declared x outside the function text and set it to 100.
Inside the test function, the interpreter has seen there&rsquo;s a variable declaration, ignored the fact that it
 is inside a code block and hoisted it to the top of the function scope. The condition is not met so x<br/>
 has not been set to 199 and remains to have a value of &lsquo;undefined&rsquo;</p>

<p>It is the same as writing</p>

<p>```javascript
var x = 100;</p>

<p>function test() {</p>

<pre><code>var x;
if(false) {
    x = 199;
}
console.log(x); //undefined
</code></pre>

<p>}</p>

<p>test();
```</p>

<h2>What is the difference between == and === in Javascript?</h2>

<p>== checks equality whereas === checks equality and type. What does this mean?</p>

<p>```javascript
//==</p>

<p> 3  == 3    //true
&lsquo;3&rsquo; == 3    //true
 3  == &ldquo;3&rdquo;  //true</p>

<p>//===
 3  === 3   //true
&lsquo;3&rsquo; === 3   //false
 3  === &ldquo;3&rdquo; //false
```</p>

<h2>What kind of conditional statements are available in Javascript</h2>

<h4>if statement</h4>

<p>```javascript
if (x === 1) {</p>

<pre><code>//...
</code></pre>

<p>}
```</p>

<h4>if else statement</h4>

<p>```javascript
if (x === 1) {</p>

<pre><code>//...
</code></pre>

<p>} else {</p>

<pre><code>//...
</code></pre>

<p>}
```</p>

<h4>if else if statement</h4>

<p>```javascript
if (x === 1) {</p>

<pre><code>//...
</code></pre>

<p>} else if(y === 1) {</p>

<pre><code>//...
</code></pre>

<p>}
```</p>

<h4>switch statement</h4>

<p>```javascript
switch (x) {</p>

<pre><code>case 1: 
    console.log('one');
    break;
case 2: 
    console.log('two');
    break;
case 3: 
    console.log('three');
    break;
default: 
    console.log('This is the default condition');
    break;
</code></pre>

<p>}
```</p>

<h2>What would the following if condition example check for</h2>

<p>```javascript
if (!condition) {</p>

<pre><code>//... 
</code></pre>

<p>}
```
This would satisfy if
condition===&lsquo;undefined&rsquo; or
condition===null  or
condition===0     or
condition===&ldquo;&rdquo;    or
condition===NaN   or
condition===false.</p>

<p>This is a common way of checking for null or undefined but you have to double check that your variable
would not ever be set to false or 0 because it will also satisfy.</p>

<h2>What kind of loops are available in Javascript?</h2>

<h4>for loop</h4>

<p>You can see in the second loop, we cache the length of the array so we don&rsquo;t need to calculate the length of the
array each iteration. Micro-performance improvement that can add up over time, although newer Javascript engines like
V8 will more than likely JIT compile for loops automatically into their most efficient form.</p>

<p>```javascript
for(var i=0; i&lt;arr.length; i++) {</p>

<pre><code>//do stuff
</code></pre>

<p>}</p>

<p>for(var i=0, l=arr.length; i&lt;l; i++) {</p>

<pre><code>//do stuff
</code></pre>

<p>}
```</p>

<h4>for in loop</h4>

<p>```javascript
for (var x in arr) {</p>

<pre><code>//do stuff
</code></pre>

<p>}
```</p>

<h4>while loop</h4>

<p>```javascript
while(x === true) {</p>

<pre><code>//do stuff
</code></pre>

<p>}
```</p>

<h4>do while loop</h4>

<p>NOTE: This does one full iteration before checking the condition
```javascript
do {</p>

<pre><code>//do stuff
</code></pre>

<p>} while (x === true)
```</p>

<h2>What different ways can you create an Array in Javascript?</h2>

<p>The following examples show you different ways to create an array in Javascript
```javascript
var arr1 = new Array();
arr1.push(&lsquo;Me&rsquo;);
arr1.push(&lsquo;You&rsquo;);
arr1.push(&lsquo;Them&rsquo;);</p>

<p>var arr2 = new Array();
arr2[0] = &lsquo;Me&rsquo;;
arr2[1] = &lsquo;You&rsquo;;
arr2[2] = &lsquo;Them&rsquo;;</p>

<p>var arr3 = new Array(&lsquo;Me&rsquo;, &lsquo;You&rsquo;, &lsquo;Them&rsquo;);</p>

<p>var arr4 = [];
arr4.push(&lsquo;Me&rsquo;);
arr4.push(&lsquo;You&rsquo;);
arr4.push(&lsquo;Them&rsquo;);</p>

<p>var arr5 = [];
arr5[0] = &lsquo;Me&rsquo;;
arr5[1] = &lsquo;You&rsquo;;
arr5[2] = &lsquo;Them&rsquo;;</p>

<p>var arr6 = [&lsquo;Me&rsquo;, &lsquo;You&rsquo;, &lsquo;Them&rsquo;]</p>

<p>```</p>

<h3>How do you write an immediately invoked function?</h3>

<p>If you were to write the following code, it would assign the function to the var addFirstFiveNumbers.
In order to access the return value, you would have to execute the function.</p>

<p>```javascript
var addFirstFiveNumbers = function() {</p>

<pre><code>var count = 0;
for(var i=0; i&lt;=5; i++) {
    count += i;
}
return count;
</code></pre>

<p>}</p>

<p>console.log(addFirstFiveNumbers()) //15
```
If you wanted the function to execute immediately and store the return value in the var instead of the function,
you use an immediately invoked function. To do this, wrap your function in parenthesis and put a set of empty
parenthesis after it</p>

<p>```javascript
var addFirstSixNumbers = (function(){</p>

<pre><code>var count = 0;
for(var j=0; j&lt;=6; j++) {
    count += j;
}
return count;
</code></pre>

<p>})();</p>

<p>console.log(addFirstSixNumbers); //21
```</p>

<h2>How can you handle errors in Javascript?</h2>

<h4>Try Catch statements</h4>

<p>These allow you to throw errors inside the try and catch them in the catch block</p>

<p>```javascript
try {</p>

<pre><code>//do stuff
throw 'My Error'
</code></pre>

<p>} catch(e) {</p>

<pre><code>console.log(e);
</code></pre>

<p>}
```</p>

<h4>Try Finally statements</h4>

<p>These allow your code to fail gracefully by performing some clean up task after your code has finished executing or failing.</p>

<p>```javascript
openMyFile();
try {</p>

<pre><code>//tie up the resource
writeTofile();
</code></pre>

<p>}
finally {</p>

<pre><code>//release the resource
closeMyFile();
</code></pre>

<p>}
```</p>

<h4>Try Catch Conditional statements &ndash; THESE ARE NON STANDARD (and do not work in V8)</h4>

<p>```javascript
try {</p>

<pre><code>//do stuff
myRoutine(); //may throw three exceptions
</code></pre>

<p>} catch(e if e instanceof TypeError) {</p>

<pre><code>//handle type errors
</code></pre>

<p>} catch(e if e instanceof RangeError) {</p>

<pre><code>//handle range errors
</code></pre>

<p>} catch(e if e instanceof EvalError) {</p>

<pre><code>//handle eval errors
</code></pre>

<p>} catch (e) {</p>

<pre><code>logMyErrors(e);
</code></pre>

<p>}
```</p>

<h2>How would you execute a function in 30 seconds time?</h2>

<h4>Set Timeout</h4>

<p>```javascript</p>

<p>var timeout = setTimeout(function(){</p>

<pre><code>//code to be executed in 30 seconds
</code></pre>

<p>}, 30000)</p>

<p>//To cancel this timeout
clearTimeout(timeout);
```</p>

<h2>How would you execute a piece of code every 10 seconds?</h2>

<h4>Set Interval</h4>

<p>```javascript
var interval = setInterval(function() {</p>

<pre><code>//Code to be executed every 10 seconds
</code></pre>

<p>},10000);</p>

<p>//To remove this setInterval
clearInterval(interval);
```</p>

<h2>Explain Inheritance in Javascript</h2>

<p>MDN explains:</p>

<blockquote><p>Inheritance is a way to create a class as a specialized version of one or more classes (JavaScript only supports
single inheritance). The specialized class is commonly called the child, and the other class is commonly called the
parent. In JavaScript you do this by assigning an instance of the parent class to the child class, and then
specializing it. In modern browsers you can also use Object.create to implement inheritance.</p></blockquote>

<h3>Difference between Object.create and the new operator</h3>

<p>Both are ways to inherit from a base class, but Object.create inherits from the prototype. What does this mean? Well lets
do an example.</p>

<p>```javascript
function Person() {</p>

<pre><code>this.species = 'human';
</code></pre>

<p>}</p>

<p>Person.prototype.speak = function () {</p>

<pre><code>console.log('Hello');
</code></pre>

<p>}</p>

<p>Person.prototype.sleep = function () {</p>

<pre><code>console.log('Snore...zzz');
</code></pre>

<p>}</p>

<p>var andrew = new Person();
console.log(andrew.species); //human
andrew.speak(); //Hello
andrew.sleep(); //Snore&hellip;zzz</p>

<p>var andy = Object.create(Person.prototype);
console.log(andy.species); //undefined
andy.speak(); //Hello
andy.sleep(); //Snore&hellip;zzz
```</p>

<p>Here, Andrew is an instance of the Person class and so has species set on it. Andy on the other hand has inherited
from the Person class&rsquo;s prototype <em>only</em> and so has access to the prototype functions of the Person class but
none of the attributes set on the class.</p>

<h2>What is the difference between .call() and .apply()</h2>

<p>At first you might think they do the same thing. Take a <em>this</em> arg and pass it to a function, lets see that
in action</p>

<p>```javascript
var car1 = {make: &lsquo;Vauxhall&rsquo;, model: &lsquo;Corsa&rsquo;, year: &lsquo;2005&rsquo;};
var car2 = {make: &lsquo;Bugatti&rsquo;, model: &lsquo;Veyron&rsquo;, year: &lsquo;2014&rsquo;};</p>

<p>var printMake = function () {</p>

<pre><code>console.log(this.make);
</code></pre>

<p>}</p>

<p>var printModel = function () {</p>

<pre><code>console.log(this.model);
</code></pre>

<p>}</p>

<p>printMake.call(car1);//Vauxhall
printMake.apply(car1);//Vauxhall</p>

<p>printMake.call(car2);//Bugatti
printMake.apply(car2);//Bugatti</p>

<p>printModel.call(car1);//Corsa
printModel.apply(car1);//Corsa</p>

<p>printModel.call(car2);//Veyron
printModel.apply(car2);//Veyron</p>

<p>```</p>

<p>Where .call() and .apply() differ is the arguments you pass after the <em>this</em> arg.</p>

<p>In a .call(), you pass your <em>this</em> arg
then followed by the args the function is expecting.</p>

<p>In a .apply(), you pass your <em>this</em> arg followed by an array containing the arguments to be passed which then get split
out into the function params.</p>

<p>Lets see these in action</p>

<p>```javascript</p>

<pre><code>var car1 = {make: 'Vauxhall', model: 'Corsa', year: '2005'};
var car2 = {make: 'Bugatti', model: 'Veyron', year: '2014'};


var udpateCar = function(make, model, year) {
    this.make = make;
    this.model = model;
    this.year = year;
};

udpateCar.call(car1, 'Vauxhall', 'Astra', '2014');
udpateCar.apply(car2, ['Mini', 'Cooper', '2014'] )

console.log(car1); //{ make: 'Vauxhall', model: 'Astra', year: '2014' }
console.log(car2); //{ make: 'Mini', model: 'Cooper', year: '2014' }
</code></pre>

<p>```</p>

<h2>How would you go about dealing with an asynchronous request?</h2>

<h4>Deferred promises</h4>

<p>jQuery and Q both provide a way to do promises and ECMAScript6 will provide a way to do native Javascript promises.</p>

<p>Lets look at the jQuery Deferred object.</p>

<p>```javascript
function asyncFunction() {</p>

<pre><code>var defer = $.Deferred();
$.ajax({
    url: 'http://getPerson.com/?gender=female'
    context: this
}).done(function (returnObj) {
    defer.resolve(returnObj);
}).fail(function () {
    defer.reject();
});
return defer.promise();
</code></pre>

<p>}</p>

<p>function myFunction() {</p>

<pre><code>var personPromise = asyncFunction();
personPromise.done(function (returnObj) { //executes when promise is resolved
        console.log(returnObj.name)
    });
personPromise.fail(function () { //executes when promise is rejected
        console.log('Failed to get the person');
    });
</code></pre>

<p>}</p>

<p>myFunction();
```</p>

<p>myFunction is calling the asyncFunction and getting a deferred promise back. When the promise
gets resolved after the ajax request returns, the done function will get executed. If the promise gets rejected, the fail
function will get executed.</p>

<p>These are useful when you are making calls out to a webservice for data.</p>

<h2>Some Javascript shortcuts/hacks</h2>

<h4>Ternary operators</h4>

<p>These are great for situations where you want to assign a var based on a condition.</p>

<p>test ? expression1 : expression2</p>

<p>You can play with these here at <a href="http://jsfiddle.net/madole404/KdnJ7/">JSFiddle</a></p>

<p>```javascript
function returnTrueIfLessThanTen(checkVal) {</p>

<pre><code>var returnVal = (checkVal &lt; 10) ? true : false;
return returnVal;
</code></pre>

<p>}
console.log(returnTrueIfLessThanTen(9)); //true
console.log(returnTrueIfLessThanTen(29)); //false
```</p>

<h3>Using bitwise operators in place of Math.floor</h3>

<p>You can have a play with these and see them in action at <a href="http://jsfiddle.net/madole404/g34mL/">JSFiddle</a></p>

<h5>Why use them?</h5>

<p> They are marginally faster than Math.floor as we can see from this <a href="http://jsperf.com/math-floor-vs-math-round-vs-parseint/70">JSPerf</a></p>

<h5>Why not to use them?</h5>

<ul>
<li>They reduce clarity in your coding</li>
<li>They only work 32-bit signed integers</li>
<li>They work by truncating the decimal rather than working out what the floor is</li>
<li>You might not get the outcome you are expecting

<ul>
<li>Math.floor(NaN) === NaN

<h1>&ndash;   (NaN >> 0) === 0</h1>

<h4>Using bitwise operators in place of Math.floor</h4></li>
</ul>
</li>
</ul>


<p>You can have a play with these and see them in action at <a href="http://jsfiddle.net/madole404/g34mL/">JSFiddle.net</a></p>

<p>```javascript
var result = 84.3/12.5;
console.log(result); //6.744</p>

<p>var round = Math.round(84.3/12.5);
console.log(round) //7</p>

<p>var floor = Math.floor(84.3/12.5);
console.log(floor) //6</p>

<p>var doubleNeg = ~~(84.3/12.5);
console.log(doubleNeg) //6</p>

<p>var bitwiseRight = (84.3/12.5) >>0;
console.log(bitwiseRight) //6</p>

<p>var bitwiseLeft = (84.3/12.5) &lt;&lt; 0;
console.log(bitwiseLeft) //6</p>

<p>var bitwiseOr = (84.3/12.5) | 0;
console.log(bitwiseOr); //6</p>

<p>var parseInteger = parseInt(84.3/12.5);
console.log(parseInteger) //6</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
