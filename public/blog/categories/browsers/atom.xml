<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: browsers | Madole's Ramblings]]></title>
  <link href="http://madole.github.io/blog/categories/browsers/atom.xml" rel="self"/>
  <link href="http://madole.github.io/"/>
  <updated>2014-08-11T07:09:26+10:00</updated>
  <id>http://madole.github.io/</id>
  <author>
    <name><![CDATA[Andrew McDowell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why you should not use var self = this]]></title>
    <link href="http://madole.github.io/blog/2014/08/08/why-you-should-not-use-var-self-equals-this/"/>
    <updated>2014-08-08T07:39:07+10:00</updated>
    <id>http://madole.github.io/blog/2014/08/08/why-you-should-not-use-var-self-equals-this</id>
    <content type="html"><![CDATA[<p>When trying to maintain context, like in a setTimeout, I&rsquo;ve seen lots code that resembles</p>

<blockquote><p>var self = this;</p></blockquote>

<p><em>self</em> is then used inside the timeout to execute the code within the scope of the parent function.</p>

<p>Self is a reserved word in the browser which is equal to Window in most browsers and therefore should not be
overwritten as it could cause confusion for someone thinking self is referring to the window object reference.</p>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window.self">https://developer.mozilla.org/en-US/docs/Web/API/Window.self</a></p>

<!--more-->


<p></p>

<p>self === window.self</p>

<blockquote><p>true</p></blockquote>

<p>self === window</p>

<blockquote><p>true</p></blockquote>

<h3>Screenshots</h3>

<h4>Mozilla Firefox</h4>

<p><img src="/images/firefoxSelf.jpg" width="700" title="" ></p>

<h4>Google Chrome</h4>

<p><img src="/images/chromeSelf.jpg" width="700"></p>

<h4>Apple Safari</h4>

<p><img src="/images/safariSelf.jpg" width="700"></p>

<p>In a lot of scenarios you can avoid this completely by refactoring your code to use private functions that are
always in scope. But in the scenarios where you can&rsquo;t avoid it, it&rsquo;s better to use a word like &ldquo;that&rdquo; which is
not reserved and is commonly used for this purpose, or using Function.prototype.bind to bind the context and
return a function.</p>

<h2>PROBLEM:</h2>

<p>```javascript</p>

<p>function MathPrint() {</p>

<pre><code>var x = 10;
var y = 100;

return {
    multiply: function (a, b) {
        return a * b;
    },
    printToConsole: function (text) {
        console.log(text);
    },
    printAndMultiplyAfterWait: function () {
        setTimeout(function () {
            this.printToConsole(this.multiply(x, y));
        }, 2000);
    }
};
</code></pre>

<p>}</p>

<p>var mathPrint = new MathPrint();</p>

<p>console.log(mathPrint.multiply(10, 5)); //50</p>

<p>mathPrint.printToConsole(2000); //2000</p>

<p>mathPrint.printAndMultiplyAfterWait(); //undefined is not a function
}</p>

<h2>```</h2>

<h2>BAD: </h2>

<p>```javascript</p>

<p>function MathPrint() {</p>

<pre><code>var x = 10;
var y = 100;
//self === window
return {
    multiply: function (a, b) {
        return a * b;
    },
    printToConsole: function (text) {
        console.log(text);
    },
    printAndMultiplyAfterWait: function () {
        var self = this; //self -&gt; function scope
        setTimeout(function () {
            self.printToConsole(self.multiply(x, y));
        }, 2000);
    }
};
</code></pre>

<p>}</p>

<p>var mathPrint = new MathPrint();</p>

<p>console.log(mathPrint.multiply(10, 5)); //50</p>

<p>mathPrint.printToConsole(2000); //2000</p>

<p>mathPrint.printAndMultiplyAfterWait(); //1000
```</p>

<hr />

<h2>GOOD: </h2>

<p>```javascript</p>

<p>function MathPrint() {</p>

<pre><code>var x = 10;
var y = 100;
return {
    multiply: function (a, b) {
        return a * b;
    },
    printToConsole: function (text) {
        console.log(text);
    },
    printAndMultiplyAfterWait: function () {
        var that = this;
        setTimeout(function () {
        that.printToConsole(that.multiply(x, y));
        }, 2000);
    }
};
</code></pre>

<p>}</p>

<p>var mathPrint = new MathPrint();</p>

<p>console.log(mathPrint.multiply(10, 5)); //50</p>

<p>mathPrint.printToConsole(2000); //2000</p>

<p>mathPrint.printAndMultiplyAfterWait(); //1000</p>

<p>```</p>

<hr />

<h2>GOOD &ndash; using Bind and Call</h2>

<p>```javascript
function MathPrint() {</p>

<pre><code>var x = 10;
var y = 100;
return {
    multiply: function (a, b) {
        return a * b;
    },
    printToConsole: function (text) {
        console.log(text);
    },
    printAndMultiplyAfterWait: function () {
        setTimeout(this.printToConsole.bind(this, this.multiply.call(this,x,y)),2000);
    }
};
</code></pre>

<p>}</p>

<p>var mathPrint = new MathPrint();</p>

<p>console.log(mathPrint.multiply(10, 5)); //50</p>

<p>mathPrint.printToConsole(2000); //2000</p>

<p>mathPrint.printAndMultiplyAfterWait(); //1000</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
