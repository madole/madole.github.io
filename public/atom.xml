<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code Stuff.]]></title>
  <link href="http://madole.github.io/atom.xml" rel="self"/>
  <link href="http://madole.github.io/"/>
  <updated>2015-08-27T17:34:02+10:00</updated>
  <id>http://madole.github.io/</id>
  <author>
    <name><![CDATA[Andrew McDowell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up webpack dev middleware in express]]></title>
    <link href="http://madole.github.io/blog/2015/08/26/setting-up-webpack-dev-middleware-in-your-express-application/"/>
    <updated>2015-08-26T19:18:02+10:00</updated>
    <id>http://madole.github.io/blog/2015/08/26/setting-up-webpack-dev-middleware-in-your-express-application</id>
    <content type="html"><![CDATA[<p> <strong>What is webpack dev server?</strong></p>

<p>Webpack dev server is a live reloading server for webpack.</p>

<p><strong>What is webpack dev middleware?</strong></p>

<p>It&rsquo;s a simple wrapper middleware for webpack. It serves the files emitted from webpack over a connect server.</p>

<p>It has a few advantages over bundling it as files:</p>

<ul>
<li>No files are written to disk, it handles the files in memory</li>
<li>If files changed in watch mode, the middleware no longer serves the old bundle, but delays requests until the compiling has finished. You don&rsquo;t have to wait before refreshing the page after a file modification.</li>
</ul>


<p><strong>What is webpack hot middleware?</strong></p>

<p>Webpack hot reloading using only webpack-dev-middleware. This allows you to add hot reloading into an existing server without webpack-dev-server.</p>

<p><strong>Using webpack-dev-server as a middleware</strong></p>

<p>Web pack provides an express middleware that you can plug into your app to serve up your fronted assets via web pack-dev-server rather than express.static or express/serve-static.<br/>
To do this you’ll need to install webpack-dev-middleware and webpack-hot-middleware</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm i webpack-dev-middleware webpack-hot-middleware
</span></code></pre></td></tr></table></div></figure>


<p>
First off you need to make a webpack.dev.config file.
In your config, add <code>webpack/hot/dev-server</code>  and  <code>webpack-hot-middleware/client</code> to your entry point as well as your js or coffee script frontend entry point.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">entry: </span>   <span class="p">[</span>
</span><span class='line'>    <span class="s">&#39;webpack/hot/dev-server&#39;</span>
</span><span class='line'>    <span class="s">&#39;webpack-hot-middleware/client&#39;</span>
</span><span class='line'>    <span class="s">&quot;</span><span class="si">#{</span><span class="nx">__dirname</span><span class="si">}</span><span class="s">/../client/index.coffee&quot;</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make your output path ‘/‘ because remember, you’re building your app into memory now rather than a build folder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">output: </span><span class="p">{</span> 
</span><span class='line'>    <span class="nv">path: </span><span class="s">&#39;/&#39;</span>
</span><span class='line'>    <span class="nv">publicPath: </span><span class="s">&#39;http://localhost:3000/scripts/&#39;</span>
</span><span class='line'>    <span class="nv">filename: </span><span class="s">&#39;bundle.js&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Add in whatever loaders and plugins you need and target &lsquo;web&rsquo; … you can see my config <a href="https://github.com/madole/webpack-dev-middleware-boilerplate/blob/master/src/config/webpack.dev.config.coffee">here</a></p>

<!--more-->


<p>Now we’ve got our dev config, we need to build our express application.<br/>
We need to require webpack, webpack-dev-middleware and webpack-hot-middleware as well as express.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">express = </span><span class="nx">require</span> <span class="s">&#39;express&#39;</span>
</span><span class='line'><span class="nv">webpack = </span><span class="nx">require</span> <span class="s">&#39;webpack&#39;</span>
</span><span class='line'><span class="nv">webpackDevMiddleware = </span><span class="nx">require</span> <span class="s">&#39;webpack-dev-middleware&#39;</span>
</span><span class='line'><span class="nv">webpackHotMiddleware = </span><span class="nx">require</span> <span class="s">&#39;webpack-hot-middleware&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need to create our express app as usual and a router to receive our requests.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">app = </span><span class="nx">express</span><span class="p">()</span>
</span><span class='line'><span class="nv">router = </span><span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">,</span> <span class="nx">someController</span><span class="p">)</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now for the webpack magic, we need to import our webpack config</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">config = </span><span class="nx">require</span> <span class="s">&#39;./config/webpack.dev.config&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Next, we need to create a compiler by feeding our config into webpack.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">compiler = </span><span class="nx">webpack</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Now we need to hook in the webpack-dev-middleware</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">webpackDevMiddleware</span><span class="p">(</span><span class="nx">compiler</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">publicPath: </span><span class="nx">config</span><span class="p">.</span><span class="nx">output</span><span class="p">.</span><span class="nx">publicPath</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">stats: </span><span class="p">{</span><span class="nv">colors: </span><span class="kc">true</span><span class="p">}</span>
</span><span class='line'><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The public path here is where you want your front-end bundle to end up. <br/>
We also need to plug in the webpack-hot-middleware</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">webpackHotMiddleware</span><span class="p">(</span><span class="nx">compiler</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">log: </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span>
</span><span class='line'><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>When all this is done, call listen on the app.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span>  <span class="nf">-&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;listening on 3000&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we just need to include the bundle.js in your index.html and we’re off. <br/>
I use nodemon to monitor my back end files so I can make changes and restart the node process, but remember to exclude your client-side files so webpack-dev-middleware can take care of them instead.</p>

<p>When you load up the app, you should see webpack-hot-middleware trying to connect to the dev server in the console</p>

<p><img src="http://i.imgur.com/MovchxZ.png" alt="Imgur" /></p>

<p><strong>How do you hook this into production code?</strong></p>

<p>Simple, have a conditional statement checking your environment variable, if you’re in a dev environment use the webpack-dev-middleware, if not, use express.static to serve your static assets.</p>

<p>You can checkout my boilerplate express app with webpack-dev-middleware and webpack-hot-middleware plugged in at <a href="https://github.com/madole/webpack-dev-middleware-boilerplate">https://github.com/madole/webpack-dev-middleware-boilerplate</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile browser sharing to WhatsApp native app]]></title>
    <link href="http://madole.github.io/blog/2015/06/18/mobile-browser-sharing-to-whatsapp-native-app/"/>
    <updated>2015-06-18T11:59:02+10:00</updated>
    <id>http://madole.github.io/blog/2015/06/18/mobile-browser-sharing-to-whatsapp-native-app</id>
    <content type="html"><![CDATA[<h4>BuzzFeed Says:</h4>

<blockquote><p>iPhone users are clicking their new WhatsApp button more than Twitter&rsquo;s. This was enough for us to build a WhatsApp sharing button generator, so you can easily create your own.</p></blockquote>

<p>They have a built a button generator, for you to generate a button for your site and you can just drop a script tag into your site and link with it.</p>

<p><img src="http://i.imgur.com/1twQFTnm.png" alt="Imgur" /></p>

<p><a href="http://whatsapp-sharing.com">WhatsApp-Sharing.com</a></p>

<h3>What if you want more control over your button?</h3>

<!--more-->


<p><em>How does your mobile browser hand off to the WhatsApp application?</em></p>

<h4>Opening WhatsApp from your browser</h4>

<p>Type <code>whatsapp://</code> into your mobile browser address bar.</p>

<p>It should open the WhatsApp application on your phone.</p>

<h4>Sending a text from the browser</h4>

<p>In order to send a text here, we want to open directly at the contacts page, to do this type this into the address bar</p>

<p><code>whatsapp://send</code></p>

<p>This should open the app at the contacts page where you can choose a contact to send a message to.</p>

<h4>How do you send text content to application?</h4>

<p>You can add a text query string to the url which will appear in the input area.</p>

<p><code>whatsapp://send?text=test</code></p>

<p>This text needs to be encoded, you can do this with javascript&rsquo;s native encodeURIComponent() function.</p>

<p><code>whatsapp://send?text=hello%20world!</code></p>

<p>All you have to do now is to put it in an a tag, style it and click it on a mobile device.</p>

<p><code>&lt;a href="whatsapp://send?text=hello%20world!"&gt;Send to WhatsApp&lt;/a&gt;</code></p>

<p>To do this dynamically in your website, here&rsquo;s an example using jQuery</p>

<p data-height="268" data-theme-id="0" data-slug-hash="rVzRxE" data-default-tab="result" data-user="madole" class='codepen'>See the Pen <a href='http://codepen.io/madole/pen/rVzRxE/'>Whatsapp Share</a> by Andrew McDowell (<a href='http://codepen.io/madole'>@madole</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="//assets.codepen.io/assets/embed/ei.js"></script>


<p>This approach works on both Android and iOS phones with WhatsApp installed.</p>

<p>Have a play with it and leave some feedback in the comments if you have any.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium ActionSequence]]></title>
    <link href="http://madole.github.io/blog/2015/03/24/selenium-action-sequence/"/>
    <updated>2015-03-24T23:30:03+11:00</updated>
    <id>http://madole.github.io/blog/2015/03/24/selenium-action-sequence</id>
    <content type="html"><![CDATA[<h4>Selenium test</h4>

<p>Should do something when an outer div, with an inner div placed in the middle in front, is clicked.</p>

<h4>How to usually do this?</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">driver</span><span class="p">.</span><span class="nx">findElement</span><span class="p">(</span><span class="nx">webdriver</span><span class="p">.</span><span class="nx">By</span><span class="p">.</span><span class="nx">className</span><span class="p">(</span><span class="s1">&#39;outer&#39;</span><span class="p">)).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">element</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>Uncaught UnknownError: unknown error: Element is not clickable at point (170, 90).
Other element would receive the click: &lt;div class="midde"&gt;&lt;/div&gt;
</code></pre>

<!--more-->


<p>Say our test is trying to test that a video plays when an image is clicked.</p>

<p>But our image has a play button overlay right in the center like below.</p>

<p><img src="http://madole.github.io/images/Keyboard_cat.png" width="500" title="" ></p>

<p>Selenium&rsquo;s default behaviour is to click right in the middle of your selected element.</p>

<p>Because there is a &ldquo;play&rdquo; div over the top of it right in the middle, selenium complains that your element is not clickable.</p>

<h4>How to get around this?</h4>

<p><a href="https://selenium.googlecode.com/git/docs/api/javascript/class_webdriver_ActionSequence.html">Selenium Docs: ActionSequence</a></p>

<p>Selenium&rsquo;s WebDriver ActionSequence provides a mouseMove function on its prototype</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">WebDriver</span><span class="p">.</span><span class="nx">ActionSequence</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">moveMouse</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>We create an action sequence that moves the mouse to the outer div, but with an offset from its top left corner.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">new</span> <span class="nx">webdriver</span><span class="p">.</span><span class="nx">ActionSequence</span><span class="p">(</span><span class="nx">driver</span><span class="p">).</span><span class="nx">moveMouse</span><span class="p">(</span><span class="nx">outerElement</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="nx">outerElement</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will now click 10px in from the top of the outer element and 10px in from the left.</p>

<p>By doing this we can now avoid clicking the middle div while clicking the outer div programmatically.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSFiddle - Firebug Lite]]></title>
    <link href="http://madole.github.io/blog/2014/11/20/jsfiddle-firebug-lite/"/>
    <updated>2014-11-20T20:45:26+11:00</updated>
    <id>http://madole.github.io/blog/2014/11/20/jsfiddle-firebug-lite</id>
    <content type="html"><![CDATA[<p>I recently discovered a cool feature in JSFiddle which changed the way I use it.</p>

<p>Until now, I&rsquo;ve been hopping on to JSFiddle to test out little bits of code and logging out to the console.</p>

<p>If you&rsquo;re like me, you&rsquo;ll be familiar with having Chrome Dev Tools open to view your console logs.</p>

<p><img src="http://madole.github.io/images/devToolsConsoleLog.png" width="700" title="" ></p>

<!--more-->


<p>This can be a bit of a pain to have to open every time, and especially for showing your JSFiddle to other people when you
send them a link, they have to open their Dev Tools up too.</p>

<h4><em>Firebug Lite to the rescue</em></h4>

<p>I came across a stack overflow where the user gave an answer and link to a JSFiddle with Firebug Lite enabled.</p>

<p>I now use it every single time I use JSFiddle.</p>

<p>Here&rsquo;s how to enable it.</p>

<p>First of all, write a line of code that logs to the console so you know it&rsquo;s worked at the end.</p>

<p><img src="http://madole.github.io/images/logToConsole.png" width="700" title="" ></p>

<p>Then in the Frameworks and Extensions section, add jQuery (edge) to the Fiddle.</p>

<p><img src="http://madole.github.io/images/addjQueryEdge.png" width="700" title="" ></p>

<p>It should look like this with a bunch of checkboxes you can choose from.</p>

<p><img src="http://madole.github.io/images/jQueryEdgeAdded.png" width="700" title="" ></p>

<p>Click Firebug Lite to add it to the Fiddle</p>

<p><img src="http://madole.github.io/images/chooseFirebug.png" width="700" title="" ></p>

<p>Finally, Run your JavaScript to see it logged out to the Firebug Lite Console in the output window.</p>

<p><img src="http://madole.github.io/images/loggedOut.png" width="700" title="" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A growing list of everyday Linux Bash commands]]></title>
    <link href="http://madole.github.io/blog/2014/11/20/a-growing-list-of-everyday-linux-bash-commands/"/>
    <updated>2014-11-20T20:12:59+11:00</updated>
    <id>http://madole.github.io/blog/2014/11/20/a-growing-list-of-everyday-linux-bash-commands</id>
    <content type="html"><![CDATA[<p>I decided to write down a list of every day commands that I use in the the Bash command line in Linux.
This is by no means a definitive list and it will grow as I remember or come across commands that make
my life easier</p>

<!--more-->


<h3>ls</h3>

<ul>
<li>  list information about files in the directory</li>
</ul>


<h3>ls -la</h3>

<ul>
<li>  list information about files in the directory</li>
<li>  <em>-l</em> means long listing format</li>
<li>  <em>-a</em> means list all files including ones that start with .</li>
</ul>


<h3>cd [directory]</h3>

<ul>
<li>  change directory to the specified directory</li>
</ul>


<h3>ps</h3>

<ul>
<li>  snapshot of the current processes</li>
</ul>


<h3>ps -ef</h3>

<ul>
<li>  <em>-e</em> select all processes</li>
<li>  <em>-f</em> full format listing</li>
</ul>


<h3>ps -ef | grep [processname]</h3>

<ul>
<li>  grep for the details of a specific process</li>
</ul>


<h3>alias (usually used in the bash profile to be persisted)</h3>

<ul>
<li>  <em>ll &ndash;> ls -la</em></li>
<li> Aliases for shortcuts to frequently visited directories</li>
<li> Aliases to bash scripts I&rsquo;ve written to automate things like sync&#8217;ing a github pages branch with master and pushing to the cloud</li>
</ul>


<h3>source [filename]</h3>

<ul>
<li>  source is a bash shell built-in command that executes the content of the file passed as argument, in the current shell. It has a synonym in &lsquo;.&rsquo; (period).</li>
</ul>


<h3>source ~/.bash_profile</h3>

<ul>
<li>  this has the effect of reloading the bash_profile so you don&rsquo;t have to kill &amp; open the terminal to see changes</li>
</ul>


<h3>&amp;&amp;</h3>

<ul>
<li>  used for tying consecutive commands together</li>
<li>  example <em>$ cd Documents &amp;&amp; ls -la</em></li>
</ul>


<h3>top</h3>

<ul>
<li>  Provides a real time summary of the processes running on your system.</li>
<li>  Can be used to see what&rsquo;s chewing up memory</li>
</ul>


<h3>Ctrl + R</h3>

<ul>
<li>  Reverse search through your bash command history</li>
</ul>


<h3>sudo</h3>

<ul>
<li> run command as the superuser</li>
</ul>


<h3>sudo -u [user]</h3>

<ul>
<li> run command as a different user</li>
</ul>


<h3>sudo !!</h3>

<ul>
<li> run the last command as super user</li>
</ul>


<h3>vi [file]</h3>

<ul>
<li>  edit the file with vi text editor</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating SVG animation with WalkwayJS]]></title>
    <link href="http://madole.github.io/blog/2014/11/05/creating-svg-animation-with-walkwayjs/"/>
    <updated>2014-11-05T15:14:27+11:00</updated>
    <id>http://madole.github.io/blog/2014/11/05/creating-svg-animation-with-walkwayjs</id>
    <content type="html"><![CDATA[<p>A few days ago this link (<a href="http://www.connoratherton.com/walkway">http://www.connoratherton.com/walkway</a>) popped up on Reddit’s <a href="http://reddit.com/r/javascript">/r/javascript</a>.</p>

<p>I liked how it looked so I set about having a go. Turns out Connor Atherton’s library has made this super easy so I thought I’d document the steps to make your own.</p>

<p>First of all you want to pick an image you want to turn into a SVG line drawing.</p>

<p>Open it in Gimp/Pixelmator/Photoshop</p>

<p><img src="http://madole.github.io/images/svgAnimateImages/chosenImage.png" width="600" title="" ></p>

<!--more-->


<p>Use the magic wand to select the outline you want</p>

<p><img src="http://madole.github.io/images/svgAnimateImages/selectionImage.png" width="600" title="" ></p>

<p>Create a new layer and paste in your selection</p>

<p><img src="http://madole.github.io/images/svgAnimateImages/selectionPasted.png" width="600" title="" ></p>

<p>If you’re using Gimp or Photoshop, you can probably go ahead and export your image to SVG, but I’m using Pixelmator which doesn’t support SVG export so at this point, I’ll jump over to iDraw to do the export.</p>

<p>It should look something like this if you open it in a text editor like SublimeText</p>

<p><img src="http://madole.github.io/images/svgAnimateImages/svgCode.png" width="600" title="" ></p>

<p>At this point you should go to the walkway github page and clone the repo. <a href="https://github.com/ConnorAtherton/walkway">https://github.com/ConnorAtherton/walkway</a></p>

<p>Now it’s time to create your webpage.</p>

<p>All you need is a simple webpage, which imports the walkway.min.js (or the unminified version if you like) and jQuery</p>

<p>Then paste in your SVG code and give the parent SVG tag an id which you can use in your JavaScript. I’ve called mine “#pic’.</p>

<p><img src="http://madole.github.io/images/svgAnimateImages/simpleWebsite.png" width="600" title="" ></p>

<p>Now create a JavaScript file and import it in your html file.</p>

<p>The code needed to draw the SVG is very very simple.</p>

<p>I’ve pasted mine below and I’ve added just an extra little bit of SVG text which will draw at the same time as the image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">drawSvg = </span><span class="nf">(selector, duration) -&gt;</span>
</span><span class='line'>    <span class="nv">svg = </span><span class="k">new</span> <span class="nx">Walkway</span><span class="p">({</span><span class="nx">selector</span><span class="p">,</span> <span class="nx">duration</span><span class="p">})</span>
</span><span class='line'>    <span class="nx">svg</span><span class="p">.</span><span class="nx">draw</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">drawSvg</span><span class="p">(</span><span class="s">&#39;#madole&#39;</span><span class="p">,</span> <span class="s">&#39;6000&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">drawSvg</span><span class="p">(</span><span class="s">&#39;#pic&#39;</span><span class="p">,</span> <span class="s">&#39;9000&#39;</span><span class="p">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>What I’m doing here is creating an options object which has a selector and duration you want the drawing to last for.</p>

<p>Then create an walkway instance, I’ve called this svg.</p>

<p>Then just svg.draw() will cause it to draw.</p>

<p>That’s all there is to it.</p>

<p><img src="http://madole.github.io/images/svgAnimateImages/endProduct.png" width="600" title="" ></p>

<h3>You can view my demo at <a href="http://madole.github.io/SVGAnimate-WalkwayJS/">SVGAnimate</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Priciples: Don't Repeat Yourself (DRY)]]></title>
    <link href="http://madole.github.io/blog/2014/09/30/priciples-dont-repeat-yourself-dry/"/>
    <updated>2014-09-30T13:43:13+10:00</updated>
    <id>http://madole.github.io/blog/2014/09/30/priciples-dont-repeat-yourself-dry</id>
    <content type="html"><![CDATA[<h3>DRY</h3>

<p>Aimed at reducing the repetition of code.</p>

<blockquote><p>&ldquo;Every piece of knowledge must have a single, unambiguous, authoritative representation within a system”
&ndash; The Pragmatic Programmer</p></blockquote>

<!--more-->


<p></p>

<p>By following the DRY principle when coding, you will write small functions that do only one thing. Then other functions are made up of calls to these small functions.</p>

<p>In this way, you can reuse code and refactor common functionality into modules that can be used in any part of your project.</p>

<p>If you find yourself copying and pasting code, you are more than likely not following the DRY principle. This should be a red flag and a chance to refactor your existing code into smaller reusable components.</p>

<p>Violations of the DRY principle are called WET (‘we enjoy typing’).</p>

<p>Nobody likes getting wet, so keep it DRY to write better code in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Patterns: Singleton]]></title>
    <link href="http://madole.github.io/blog/2014/08/18/patterns-singleton/"/>
    <updated>2014-08-18T13:21:18+10:00</updated>
    <id>http://madole.github.io/blog/2014/08/18/patterns-singleton</id>
    <content type="html"><![CDATA[<blockquote><p>The singleton pattern is a design pattern that restricts the instantiation of a class to one object.
This is useful when exactly one object is needed to coordinate actions across the system.
The concept is sometimes generalized to systems that operate more efficiently when only one object exists,
or that restrict the instantiation to a certain number of objects.
The term comes from the mathematical concept of a singleton.</p></blockquote>

<!--more-->


<p></p>

<h3>Features of the Singleton pattern</h3>

<ul>
<li>Lazy construction.

<ul>
<li>The singleton object is not created until it is needed to be used for the first time.</li>
</ul>
</li>
<li>The constructor is private so you can not build new instances of the object.</li>
<li>The constructor is only ever called by the getInstance function if the object does not already exist.</li>
</ul>


<h3>Code example</h3>

<p>A typical singleton pattern in JavaScript looks like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">singletonDriver</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//private methods and variables</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;Wilson&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">cars</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Porche&#39;</span><span class="p">,</span> <span class="s1">&#39;Ferarri&#39;</span><span class="p">,</span> <span class="s1">&#39;Volvo&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">function</span> <span class="nx">printCars</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">cars</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Public methods</span>
</span><span class='line'>        <span class="nx">getName</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">getCars</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">cars</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">printCars</span><span class="o">:</span> <span class="nx">printCars</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">getInstance</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">instance</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">instance</span> <span class="o">=</span> <span class="nx">init</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">instance</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">})();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Usage:</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">driver1</span> <span class="o">=</span> <span class="nx">singletonDriver</span><span class="p">.</span><span class="nx">getInstance</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">driver2</span> <span class="o">=</span> <span class="nx">singletonDriver</span><span class="p">.</span><span class="nx">getInstance</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">driver1</span> <span class="o">===</span> <span class="nx">driver2</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">driver1</span><span class="p">.</span><span class="nx">getCars</span><span class="p">()</span> <span class="o">===</span> <span class="nx">driver2</span><span class="p">.</span><span class="nx">getCars</span><span class="p">());</span> <span class="c1">// true</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">driver1</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">//wilson</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">driver2</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">//wilson</span>
</span><span class='line'>  <span class="nx">driver1</span><span class="p">.</span><span class="nx">printCars</span><span class="p">();</span> <span class="c1">//[ &#39;Porche&#39;, &#39;Ferarri&#39;, &#39;Volvo&#39; ]</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lets look at what we have created.</p>

<ul>
<li><p>An instance variable that is set to null, this will hold our instance of the singleton when
the getInstance function is called for the first time.</p></li>
<li><p>An init() function which will build our singleton. It can contain private and public variables and functions.</p></li>
<li><p>A public getInstance() function. This will return the instance if it already exists and or if it doesn&rsquo;t,
it will create it, set our instance variable and then return it.</p></li>
</ul>


<p>That&rsquo;s all there is to it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why you should not use var self = this]]></title>
    <link href="http://madole.github.io/blog/2014/08/08/why-you-should-not-use-var-self-equals-this/"/>
    <updated>2014-08-08T07:39:07+10:00</updated>
    <id>http://madole.github.io/blog/2014/08/08/why-you-should-not-use-var-self-equals-this</id>
    <content type="html"><![CDATA[<p>When trying to maintain context, like in a setTimeout, I&rsquo;ve seen lots code that resembles</p>

<blockquote><p>var self = this;</p></blockquote>

<p><em>self</em> is then used inside the timeout to execute the code within the scope of the parent function.</p>

<p>Self is a reserved word in the browser which is equal to Window in most browsers and therefore should not be
overwritten as it could cause confusion for someone thinking self is referring to the window object reference.</p>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window.self">https://developer.mozilla.org/en-US/docs/Web/API/Window.self</a></p>

<!--more-->


<p></p>

<p>self === window.self</p>

<blockquote><p>true</p></blockquote>

<p>self === window</p>

<blockquote><p>true</p></blockquote>

<h3>Screenshots</h3>

<h4>Mozilla Firefox</h4>

<p><img src="http://madole.github.io/images/firefoxSelf.jpg" width="700" title="" ></p>

<h4>Google Chrome</h4>

<p><img src="http://madole.github.io/images/chromeSelf.jpg" width="700"></p>

<h4>Apple Safari</h4>

<p><img src="http://madole.github.io/images/safariSelf.jpg" width="700"></p>

<p>In a lot of scenarios you can avoid this completely by refactoring your code to use private functions that are
always in scope. But in the scenarios where you can&rsquo;t avoid it, it&rsquo;s better to use a word like &ldquo;that&rdquo; which is
not reserved and is commonly used for this purpose, or using Function.prototype.bind to bind the context and
return a function.</p>

<h2>PROBLEM:</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">MathPrint</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">multiply</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">printToConsole</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">printAndMultiplyAfterWait</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">printToConsole</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">));</span>
</span><span class='line'>            <span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">mathPrint</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MathPrint</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mathPrint</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">));</span> <span class="c1">//50</span>
</span><span class='line'>
</span><span class='line'><span class="nx">mathPrint</span><span class="p">.</span><span class="nx">printToConsole</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span> <span class="c1">//2000</span>
</span><span class='line'>
</span><span class='line'><span class="nx">mathPrint</span><span class="p">.</span><span class="nx">printAndMultiplyAfterWait</span><span class="p">();</span> <span class="c1">//undefined is not a function</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>BAD: </h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">MathPrint</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//self === window</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">multiply</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">printToConsole</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">printAndMultiplyAfterWait</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span> <span class="c1">//self -&gt; function scope</span>
</span><span class='line'>            <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">self</span><span class="p">.</span><span class="nx">printToConsole</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">));</span>
</span><span class='line'>            <span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">mathPrint</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MathPrint</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mathPrint</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">));</span> <span class="c1">//50</span>
</span><span class='line'>
</span><span class='line'><span class="nx">mathPrint</span><span class="p">.</span><span class="nx">printToConsole</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span> <span class="c1">//2000</span>
</span><span class='line'>
</span><span class='line'><span class="nx">mathPrint</span><span class="p">.</span><span class="nx">printAndMultiplyAfterWait</span><span class="p">();</span> <span class="c1">//1000</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>GOOD: Revealing module pattern</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">printMath</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">multiply</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">printToConsole</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">printAndMultiplyAsync</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">printToConsole</span><span class="p">(</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">));</span>
</span><span class='line'>        <span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">multiply</span><span class="o">:</span> <span class="nx">multiply</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">printToConsole</span><span class="o">:</span> <span class="nx">printToConsole</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">printAndMultiplyAsync</span><span class="o">:</span> <span class="nx">printAndMultiplyAsync</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">printMathInstance</span> <span class="o">=</span> <span class="nx">printMath</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">printMathInstance</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">));</span> <span class="c1">//25</span>
</span><span class='line'>
</span><span class='line'><span class="nx">printMathInstance</span><span class="p">.</span><span class="nx">printAndMultiplyAsync</span><span class="p">();</span> <span class="c1">//1000</span>
</span><span class='line'>
</span><span class='line'><span class="nx">printMathInstance</span><span class="p">.</span><span class="nx">printToConsole</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span> <span class="c1">//2000</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>GOOD &ndash; using Bind and Call</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">MathPrint</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">multiply</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">printToConsole</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">printAndMultiplyAfterWait</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">setTimeout</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">printToConsole</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">multiply</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)),</span><span class="mi">2000</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">mathPrint</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MathPrint</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mathPrint</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">));</span> <span class="c1">//50</span>
</span><span class='line'>
</span><span class='line'><span class="nx">mathPrint</span><span class="p">.</span><span class="nx">printToConsole</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span> <span class="c1">//2000</span>
</span><span class='line'>
</span><span class='line'><span class="nx">mathPrint</span><span class="p">.</span><span class="nx">printAndMultiplyAfterWait</span><span class="p">();</span> <span class="c1">//1000</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript interview questions]]></title>
    <link href="http://madole.github.io/blog/2014/07/19/javascript-interview-questions/"/>
    <updated>2014-07-19T18:29:09+10:00</updated>
    <id>http://madole.github.io/blog/2014/07/19/javascript-interview-questions</id>
    <content type="html"><![CDATA[<p>I was asked recently by a friend of mine to come up with a list of interview questions that you can get asked during
a Javascript interview. I looked by to my last interview and came up with a few topics for him to brush up on.
I thought I&rsquo;d write them down so others might make use of them. If you were asked anything I&rsquo;ve not included, let me
know in the comments section.</p>

<!--more-->


<p></p>

<p>We&rsquo;ll start easy&hellip;</p>

<h3>What is Javascript?</h3>

<p>Mozilla Developer Network describes Javascript as:</p>

<blockquote><p>JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions,
most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js
or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic,and supports
object-oriented, imperative, and functional programming styles.</p></blockquote>

<p>The standards for Javascript are written in the ECMAScript documents. Currently we&rsquo;re on ES5 but ES6 has just been
locked down so I&rsquo;m looking forward to checking out some of the goodies it has to offer such as native promises and
modules and classes.</p>

<h3>What is variable scoping?</h3>

<p>Variable scoping in Javascript can get complicated so lets do some examples.</p>

<h4>Globally scoped variable</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">test</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">//1</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Locally scoped variable</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">test</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">//1</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Closure</h4>

<p>The return function still has access to the internal variable by trapping it in the closure.
This is one of the great features of closures. More on this later.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">close</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">//1</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">close</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Implicit Globals <em>WATCH OUT FOR THESE</em></h4>

<p>This is where you don&rsquo;t declare a variable but then set it, these automatically go into the global scope.
It is worth while checking for implicit globally scoped variables every now and again in your javascript
because they can cause issues where things don&rsquo;t seem to act like they should.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">test</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">//1</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What does variable hoisting mean in Javascript?</h2>

<p>Javascript has a way of hoisting variable declarations to the top of the function. This can produce some unexpected
results if you are not aware of it them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="c1">//5</span>
</span><span class='line'><span class="p">})()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above example is interpreted exactly the same as this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="c1">//5</span>
</span><span class='line'><span class="p">})()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where this gets confusing is in an example like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">test</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">199</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">//undefined</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s going on here? Well we&rsquo;ve declared x outside the function text and set it to 100.
Inside the test function, the interpreter has seen there&rsquo;s a variable declaration, ignored the fact that it
 is inside a code block and hoisted it to the top of the function scope. The condition is not met so x<br/>
 has not been set to 199 and remains to have a value of &lsquo;undefined&rsquo;</p>

<p>It is the same as writing</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">test</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">x</span> <span class="o">=</span> <span class="mi">199</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">//undefined</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What is the difference between == and === in Javascript?</h2>

<p>== checks equality whereas === checks equality and type. What does this mean?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//==</span>
</span><span class='line'>
</span><span class='line'> <span class="mi">3</span>  <span class="o">==</span> <span class="mi">3</span>    <span class="c1">//true</span>
</span><span class='line'><span class="s1">&#39;3&#39;</span> <span class="o">==</span> <span class="mi">3</span>    <span class="c1">//true</span>
</span><span class='line'> <span class="mi">3</span>  <span class="o">==</span> <span class="s2">&quot;3&quot;</span>  <span class="c1">//true</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//===</span>
</span><span class='line'> <span class="mi">3</span>  <span class="o">===</span> <span class="mi">3</span>   <span class="c1">//true</span>
</span><span class='line'><span class="s1">&#39;3&#39;</span> <span class="o">===</span> <span class="mi">3</span>   <span class="c1">//false</span>
</span><span class='line'> <span class="mi">3</span>  <span class="o">===</span> <span class="s2">&quot;3&quot;</span> <span class="c1">//false</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What kind of conditional statements are available in Javascript</h2>

<h4>if statement</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>if else statement</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>if else if statement</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">y</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>switch statement</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">switch</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;one&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;two&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;three&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;This is the default condition&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What would the following if condition example check for</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//... </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
This would satisfy if
condition===&lsquo;undefined&rsquo; or
condition===null  or
condition===0     or
condition===&ldquo;&rdquo;    or
condition===NaN   or
condition===false.</p>

<p>This is a common way of checking for null or undefined but you have to double check that your variable
would not ever be set to false or 0 because it will also satisfy.</p>

<h2>What kind of loops are available in Javascript?</h2>

<h4>for loop</h4>

<p>You can see in the second loop, we cache the length of the array so we don&rsquo;t need to calculate the length of the
array each iteration. Micro-performance improvement that can add up over time, although newer Javascript engines like
V8 will more than likely JIT compile for loops automatically into their most efficient form.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//do stuff</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="nx">l</span><span class="o">=</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">l</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//do stuff</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>for in loop</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">x</span> <span class="k">in</span> <span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//do stuff</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>while loop</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">while</span><span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//do stuff</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>do while loop</h4>

<p>NOTE: This does one full iteration before checking the condition</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//do stuff</span>
</span><span class='line'><span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What different ways can you create an Array in Javascript?</h2>

<p>The following examples show you different ways to create an array in Javascript</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
</span><span class='line'><span class="nx">arr1</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;Me&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">arr1</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;You&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">arr1</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;Them&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
</span><span class='line'><span class="nx">arr2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Me&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">arr2</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;You&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">arr2</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Them&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr3</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="s1">&#39;Me&#39;</span><span class="p">,</span> <span class="s1">&#39;You&#39;</span><span class="p">,</span> <span class="s1">&#39;Them&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr4</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="nx">arr4</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;Me&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">arr4</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;You&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">arr4</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;Them&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr5</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="nx">arr5</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Me&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">arr5</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;You&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">arr5</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Them&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr6</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Me&#39;</span><span class="p">,</span> <span class="s1">&#39;You&#39;</span><span class="p">,</span> <span class="s1">&#39;Them&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>How do you write an immediately invoked function?</h3>

<p>If you were to write the following code, it would assign the function to the var addFirstFiveNumbers.
In order to access the return value, you would have to execute the function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">addFirstFiveNumbers</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;=</span><span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">count</span> <span class="o">+=</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">addFirstFiveNumbers</span><span class="p">())</span> <span class="c1">//15</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you wanted the function to execute immediately and store the return value in the var instead of the function,
you use an immediately invoked function. To do this, wrap your function in parenthesis and put a set of empty
parenthesis after it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">addFirstSixNumbers</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">j</span><span class="o">&lt;=</span><span class="mi">6</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">count</span> <span class="o">+=</span> <span class="nx">j</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">count</span><span class="p">;</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">addFirstSixNumbers</span><span class="p">);</span> <span class="c1">//21</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How can you handle errors in Javascript?</h2>

<h4>Try Catch statements</h4>

<p>These allow you to throw errors inside the try and catch them in the catch block</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//do stuff</span>
</span><span class='line'>    <span class="k">throw</span> <span class="s1">&#39;My Error&#39;</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Try Finally statements</h4>

<p>These allow your code to fail gracefully by performing some clean up task after your code has finished executing or failing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">openMyFile</span><span class="p">();</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//tie up the resource</span>
</span><span class='line'>    <span class="nx">writeTofile</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">finally</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//release the resource</span>
</span><span class='line'>    <span class="nx">closeMyFile</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Try Catch Conditional statements &ndash; THESE ARE NON STANDARD (and do not work in V8)</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//do stuff</span>
</span><span class='line'>    <span class="nx">myRoutine</span><span class="p">();</span> <span class="c1">//may throw three exceptions</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span> <span class="k">if</span> <span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">TypeError</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//handle type errors</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span> <span class="k">if</span> <span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">RangeError</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//handle range errors</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span> <span class="k">if</span> <span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">EvalError</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//handle eval errors</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">logMyErrors</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How would you execute a function in 30 seconds time?</h2>

<h4>Set Timeout</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">timeout</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">//code to be executed in 30 seconds</span>
</span><span class='line'><span class="p">},</span> <span class="mi">30000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//To cancel this timeout</span>
</span><span class='line'><span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How would you execute a piece of code every 10 seconds?</h2>

<h4>Set Interval</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">interval</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Code to be executed every 10 seconds</span>
</span><span class='line'><span class="p">},</span><span class="mi">10000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//To remove this setInterval</span>
</span><span class='line'><span class="nx">clearInterval</span><span class="p">(</span><span class="nx">interval</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Explain Inheritance in Javascript</h2>

<p>MDN explains:</p>

<blockquote><p>Inheritance is a way to create a class as a specialized version of one or more classes (JavaScript only supports
single inheritance). The specialized class is commonly called the child, and the other class is commonly called the
parent. In JavaScript you do this by assigning an instance of the parent class to the child class, and then
specializing it. In modern browsers you can also use Object.create to implement inheritance.</p></blockquote>

<h3>Difference between Object.create and the new operator</h3>

<p>Both are ways to inherit from a base class, but Object.create inherits from the prototype. What does this mean? Well lets
do an example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Person</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">species</span> <span class="o">=</span> <span class="s1">&#39;human&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">speak</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sleep</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Snore...zzz&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">andrew</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">andrew</span><span class="p">.</span><span class="nx">species</span><span class="p">);</span> <span class="c1">//human</span>
</span><span class='line'><span class="nx">andrew</span><span class="p">.</span><span class="nx">speak</span><span class="p">();</span> <span class="c1">//Hello</span>
</span><span class='line'><span class="nx">andrew</span><span class="p">.</span><span class="nx">sleep</span><span class="p">();</span> <span class="c1">//Snore...zzz</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">andy</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">andy</span><span class="p">.</span><span class="nx">species</span><span class="p">);</span> <span class="c1">//undefined</span>
</span><span class='line'><span class="nx">andy</span><span class="p">.</span><span class="nx">speak</span><span class="p">();</span> <span class="c1">//Hello</span>
</span><span class='line'><span class="nx">andy</span><span class="p">.</span><span class="nx">sleep</span><span class="p">();</span> <span class="c1">//Snore...zzz</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, Andrew is an instance of the Person class and so has species set on it. Andy on the other hand has inherited
from the Person class&rsquo;s prototype <em>only</em> and so has access to the prototype functions of the Person class but
none of the attributes set on the class.</p>

<h2>What is the difference between .call() and .apply()</h2>

<p>At first you might think they do the same thing. Take a <em>this</em> arg and pass it to a function, lets see that
in action</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">car1</span> <span class="o">=</span> <span class="p">{</span><span class="nx">make</span><span class="o">:</span> <span class="s1">&#39;Vauxhall&#39;</span><span class="p">,</span> <span class="nx">model</span><span class="o">:</span> <span class="s1">&#39;Corsa&#39;</span><span class="p">,</span> <span class="nx">year</span><span class="o">:</span> <span class="s1">&#39;2005&#39;</span><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">car2</span> <span class="o">=</span> <span class="p">{</span><span class="nx">make</span><span class="o">:</span> <span class="s1">&#39;Bugatti&#39;</span><span class="p">,</span> <span class="nx">model</span><span class="o">:</span> <span class="s1">&#39;Veyron&#39;</span><span class="p">,</span> <span class="nx">year</span><span class="o">:</span> <span class="s1">&#39;2014&#39;</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">printMake</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">make</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">printModel</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">printMake</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">car1</span><span class="p">);</span><span class="c1">//Vauxhall</span>
</span><span class='line'><span class="nx">printMake</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">car1</span><span class="p">);</span><span class="c1">//Vauxhall</span>
</span><span class='line'>
</span><span class='line'><span class="nx">printMake</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">car2</span><span class="p">);</span><span class="c1">//Bugatti</span>
</span><span class='line'><span class="nx">printMake</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">car2</span><span class="p">);</span><span class="c1">//Bugatti</span>
</span><span class='line'>
</span><span class='line'><span class="nx">printModel</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">car1</span><span class="p">);</span><span class="c1">//Corsa</span>
</span><span class='line'><span class="nx">printModel</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">car1</span><span class="p">);</span><span class="c1">//Corsa</span>
</span><span class='line'>
</span><span class='line'><span class="nx">printModel</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">car2</span><span class="p">);</span><span class="c1">//Veyron</span>
</span><span class='line'><span class="nx">printModel</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">car2</span><span class="p">);</span><span class="c1">//Veyron</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where .call() and .apply() differ is the arguments you pass after the <em>this</em> arg.</p>

<p>In a .call(), you pass your <em>this</em> arg
then followed by the args the function is expecting.</p>

<p>In a .apply(), you pass your <em>this</em> arg followed by an array containing the arguments to be passed which then get split
out into the function params.</p>

<p>Lets see these in action</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">car1</span> <span class="o">=</span> <span class="p">{</span><span class="nx">make</span><span class="o">:</span> <span class="s1">&#39;Vauxhall&#39;</span><span class="p">,</span> <span class="nx">model</span><span class="o">:</span> <span class="s1">&#39;Corsa&#39;</span><span class="p">,</span> <span class="nx">year</span><span class="o">:</span> <span class="s1">&#39;2005&#39;</span><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">car2</span> <span class="o">=</span> <span class="p">{</span><span class="nx">make</span><span class="o">:</span> <span class="s1">&#39;Bugatti&#39;</span><span class="p">,</span> <span class="nx">model</span><span class="o">:</span> <span class="s1">&#39;Veyron&#39;</span><span class="p">,</span> <span class="nx">year</span><span class="o">:</span> <span class="s1">&#39;2014&#39;</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">udpateCar</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">make</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">year</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">make</span> <span class="o">=</span> <span class="nx">make</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="nx">model</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">year</span> <span class="o">=</span> <span class="nx">year</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">udpateCar</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">car1</span><span class="p">,</span> <span class="s1">&#39;Vauxhall&#39;</span><span class="p">,</span> <span class="s1">&#39;Astra&#39;</span><span class="p">,</span> <span class="s1">&#39;2014&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">udpateCar</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">car2</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;Mini&#39;</span><span class="p">,</span> <span class="s1">&#39;Cooper&#39;</span><span class="p">,</span> <span class="s1">&#39;2014&#39;</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">car1</span><span class="p">);</span> <span class="c1">//{ make: &#39;Vauxhall&#39;, model: &#39;Astra&#39;, year: &#39;2014&#39; }</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">car2</span><span class="p">);</span> <span class="c1">//{ make: &#39;Mini&#39;, model: &#39;Cooper&#39;, year: &#39;2014&#39; }</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How would you go about dealing with an asynchronous request?</h2>

<h4>Deferred promises</h4>

<p>jQuery and Q both provide a way to do promises and ECMAScript6 will provide a way to do native Javascript promises.</p>

<p>Lets look at the jQuery Deferred object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">asyncFunction</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">defer</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://getPerson.com/?gender=female&#39;</span>
</span><span class='line'>        <span class="nx">context</span><span class="o">:</span> <span class="k">this</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">returnObj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">defer</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">returnObj</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">fail</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">defer</span><span class="p">.</span><span class="nx">reject</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">defer</span><span class="p">.</span><span class="nx">promise</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">myFunction</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">personPromise</span> <span class="o">=</span> <span class="nx">asyncFunction</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">personPromise</span><span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">returnObj</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//executes when promise is resolved</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">returnObj</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="nx">personPromise</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="c1">//executes when promise is rejected</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Failed to get the person&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myFunction</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>myFunction is calling the asyncFunction and getting a deferred promise back. When the promise
gets resolved after the ajax request returns, the done function will get executed. If the promise gets rejected, the fail
function will get executed.</p>

<p>These are useful when you are making calls out to a webservice for data.</p>

<h2>Some Javascript shortcuts/hacks</h2>

<h4>Ternary operators</h4>

<p>These are great for situations where you want to assign a var based on a condition.</p>

<p>test ? expression1 : expression2</p>

<p>You can play with these here at <a href="http://jsfiddle.net/madole404/KdnJ7/">JSFiddle</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">returnTrueIfLessThanTen</span><span class="p">(</span><span class="nx">checkVal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">returnVal</span> <span class="o">=</span> <span class="p">(</span><span class="nx">checkVal</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span> <span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">returnVal</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">returnTrueIfLessThanTen</span><span class="p">(</span><span class="mi">9</span><span class="p">));</span> <span class="c1">//true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">returnTrueIfLessThanTen</span><span class="p">(</span><span class="mi">29</span><span class="p">));</span> <span class="c1">//false</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using bitwise operators in place of Math.floor</h3>

<p>You can have a play with these and see them in action at <a href="http://jsfiddle.net/madole404/g34mL/">JSFiddle</a></p>

<h5>Why use them?</h5>

<p> They are marginally faster than Math.floor as we can see from this <a href="http://jsperf.com/math-floor-vs-math-round-vs-parseint/70">JSPerf</a></p>

<h5>Why not to use them?</h5>

<ul>
<li>They reduce clarity in your coding</li>
<li>They only work 32-bit signed integers</li>
<li>They work by truncating the decimal rather than working out what the floor is</li>
<li>You might not get the outcome you are expecting

<ul>
<li>Math.floor(NaN) === NaN

<h1>&ndash;   (NaN >> 0) === 0</h1>

<h4>Using bitwise operators in place of Math.floor</h4></li>
</ul>
</li>
</ul>


<p>You can have a play with these and see them in action at <a href="http://jsfiddle.net/madole404/g34mL/">JSFiddle.net</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="mf">84.3</span><span class="o">/</span><span class="mf">12.5</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span> <span class="c1">//6.744</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">round</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="mf">84.3</span><span class="o">/</span><span class="mf">12.5</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">round</span><span class="p">)</span> <span class="c1">//7</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">floor</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="mf">84.3</span><span class="o">/</span><span class="mf">12.5</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">floor</span><span class="p">)</span> <span class="c1">//6</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">doubleNeg</span> <span class="o">=</span> <span class="o">~~</span><span class="p">(</span><span class="mf">84.3</span><span class="o">/</span><span class="mf">12.5</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">doubleNeg</span><span class="p">)</span> <span class="c1">//6</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">bitwiseRight</span> <span class="o">=</span> <span class="p">(</span><span class="mf">84.3</span><span class="o">/</span><span class="mf">12.5</span><span class="p">)</span> <span class="o">&gt;&gt;</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bitwiseRight</span><span class="p">)</span> <span class="c1">//6</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">bitwiseLeft</span> <span class="o">=</span> <span class="p">(</span><span class="mf">84.3</span><span class="o">/</span><span class="mf">12.5</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bitwiseLeft</span><span class="p">)</span> <span class="c1">//6</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">bitwiseOr</span> <span class="o">=</span> <span class="p">(</span><span class="mf">84.3</span><span class="o">/</span><span class="mf">12.5</span><span class="p">)</span> <span class="o">|</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bitwiseOr</span><span class="p">);</span> <span class="c1">//6</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">parseInteger</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="mf">84.3</span><span class="o">/</span><span class="mf">12.5</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">parseInteger</span><span class="p">)</span> <span class="c1">//6</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Toolbox]]></title>
    <link href="http://madole.github.io/blog/2014/07/16/javascript-toolbox/"/>
    <updated>2014-07-16T19:05:22+10:00</updated>
    <id>http://madole.github.io/blog/2014/07/16/javascript-toolbox</id>
    <content type="html"><![CDATA[<p>I write Javascript most days and have done so for a few years now. I still find new tools, websites, frameworks and
ways to do things. I thought I&rsquo;d write them down and get the list online as it may help other people discover some
useful tools of the trade. If you have any suggestions, stick them in the comments section.</p>

<!--more-->


<p></p>

<h2>IDEs and editors</h2>

<h3>Sublime Text 2</h3>

<p>Your go to text editor. When you download it fresh, it won&rsquo;t feel like much but once you load it full of plugins
that you can find at <a href="https://sublime.wbond.net/">Package Control</a>. It becomes a great tool for knocking up Javascript. I&rsquo;ll do another post on my sublime 2
 plugins later.</p>

<p><a href="http://www.sublimetext.com/">Sublime Text 2</a></p>

<h3>Sublime Text 3</h3>

<p>The younger more unstable brother of Sublime Text 2. I use this even though it&rsquo;s still in beta because it allows
JSGutter to run Node.js and jshint my code in real time instead of just on every save or load.</p>

<p><a href="http://www.sublimetext.com/3">Sublime Text 3</a></p>

<h3>Webstorm</h3>

<p>I used Webstorm in a project in my previous job, and I&rsquo;m not sure whether it was my laptop being substandard or Webstorm
being a resource hungry beast but it was slow and sluggish for a JS IDE. But, fast forward a year, I&rsquo;m not sure if it
got more efficient or my machine upgrades provide it with the juice it needs but WHOAAA! I&rsquo;m running it on both Fedora 20
and OSX with i5 and i7 processors and 16Gb ram in each, it&rsquo;s the tool I was expecting it to be. Fast, great linting,
unmatched intellisense. It&rsquo;s a great product. Sometimes you can get the feeling it&rsquo;s got too much on screen but it&rsquo;s
just a case of finding the configuration that works for you. It is loaded with keyboard shortcuts so my advice is to
print out a Webstorm cheatsheet and tack it to the wall beside your screen. When you start storing them in muscle
memory, you&rsquo;ll barely even need a mouse in your life! Check out the <a href="http://www.jetbrains.com/webstorm/download/">30 day trial</a>!</p>

<p><a href="http://www.jetbrains.com/webstorm/">Webstorm</a></p>

<h3>Atom</h3>

<p>This is worth a mention and with a tagline of &ldquo;The hackable text editor&rdquo; its definitely one to keep an eye on. A Javascript
editor written in Javascript! It&rsquo;s being developed by GitHub. Imagine Sublime Text that you can write your own plugins in
Javascript! Cool&hellip;eh? I got on the beta trial a few months ago and it seemed a bit unstable but definitely a watch
this space product! You can check out the <a href="https://github.com/atom">github page</a> where the code is hosted, I was
suprised to find it written in CoffeeScript. I&rsquo;m quite happy about this as I&rsquo;ve just made the move to CoffeeScript myself.</p>

<p><a href="http://atom.io">Atom.io</a></p>

<h2>Online Javascript Playgrounds</h2>

<h3>Jsfiddle.net</h3>

<p>I like this webapp to test out exactly what happens in a particular scenario that you&rsquo;re not quite sure what way
Javascript will react. Yesterday, I had a case during a code review I was doing where a setInterval as being assigned
to a var and a clearInterval was being called a little later, but a deviation in the code path caused a second
setInterval to be assigned to that same var. I had suspected then that the var would only hold reference to the
last one and therefore keep the first one ticking on but just wanted to make sure. A few seconds later I confirmed
it and dinged the commit explaining why. It&rsquo;s also useful that you can send your JSFiddle to the person to explain
what you mean.</p>

<p><a href="http://jsfiddle.net">JSFiddle</a></p>

<h3>JSbin.com</h3>

<p>Exactly the same idea as JSFiddle except I like the fact that it live reloads so you don&rsquo;t have to click a run button
each time. Just write your JS and watch your logs appear  in the console or output window</p>

<p><a href="http://jsbin.com">JSBin</a></p>

<h3>Codepen.io</h3>

<p>A very clean interface that does much the same as the above two. I get the feeling this is more for mocking up full html
pages rather than just knocking out a bit of Javascript though. Some very interesting demos on the &ldquo;Picked Pens&rdquo; section
of the homepage</p>

<p><a href="http://codepen.io/">Codepen.io</a></p>

<h2>Performance</h2>

<h3>JSPerf.com</h3>

<p>Great website for comparing the performance of different ways to do the same thing. For instance, whether an
incrementing for loop is quicker than a decrementing for loop or while loop or a for in loop. My team mate did a
blog post about this a few weeks ago
(<a href="http://www.christopherlaughlin.co.uk/2014/06/29/Javascript-loop-performance/">For Loop Performance</a>).
These are only micro-performance improvements, but in work, I write
Javascript to run in a browser on embedded devices with limited resources so every little helps!</p>

<p><a href="http://jsperf.com">JSPerf</a></p>

<h2>Podcasts</h2>

<h3>Javascript Jabber</h3>

<p>My favorite Javascript podcast. They do weekly shows and have people on who are either working for some of the top
Javascript companies or are big contributors to the open source JS community.</p>

<p><a href="http://Javascriptjabber.com/">Javascriptjabber.com/</a></p>

<h3>Frontside the podcast</h3>

<p>I&rsquo;ve just started listening to this podcast and they seem to have a ton of interesting topics of discussion.
Worth checking out.</p>

<p><a href="https://frontsidethepodcast.simplecast.fm/episodes">Frontside the podcast</a></p>

<h3>Node up (&amp; Node down)</h3>

<p>My teammate at CAM tech just told me about these podcasts, apparently NodeUp is an already established podcast and
they&rsquo;re starting a NodeDown for the Southern Hemisphere. I&rsquo;ll be checking these out. You should too!</p>

<p><a href="http://nodeup.com/">http://nodeup.com/</a></p>

<h2>Meetups</h2>

<p>I live in Sydney and there are many Javascript meetups. Just checkout <a href="http://www.meetup.com/">Meetup.com</a>.
I&rsquo;ve been meaning to get myself to <a href="http://www.sydjs.com/">SydJS</a> and the Sydney NodeJs meetups.
Someday I&rsquo;ll get there.</p>

<h3>MongoDb Meetup</h3>

<p>MongoDb meetup is one I attend when I can. We use MongoDb in our side project so it&rsquo;s interesting to listen to case
studies and experts talk about it. Also, Stennie (<a href="http://twitter.com/stennie">@stennie</a>) and the rest of the Mongo
crew are super friendly and always willing to help out if you have any issues with your Mongo implementation.</p>

<p><a href="https://www.google.com.au/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CBwQFjAA&amp;url=http%3A%2F%2Fwww.meetup.com%2FSydney-MongoDB-User-Group%2F&amp;ei=q0jGU8SNNYui8AWTuYDICA&amp;usg=AFQjCNG382vYUazai3it5h71d3OhSurkVA&amp;sig2=cI8e_dwfmgOW-cGpL2u4Ig">MongoDb Sydney User Group</a></p>

<h2>Books</h2>

<h3>Javascript: The Good Parts &ndash; Douglas Crockford &ndash; O&#8217;Reilly</h3>

<p>The first Javascript book I ever read. Takes you through all the concepts and topics you need to know about to get
on your way to being a great Javascript programmer.</p>

<p><a href="http://shop.oreilly.com/product/9780596517748.do">Javascript: The Good Parts</a></p>

<h3>Clean Code &ndash; Robert C. Martin</h3>

<p>This is actually a book written about Java but I constantly refer to it no matter what language I write in which is
why I&rsquo;m including it in my list. It takes you through examples of bad code and explains why they are bad and how to
make them better by transforming them into great looking, readable code. Because after all, 99% of the time, you&rsquo;re
not writing code for you too look at, you&rsquo;re writing code which other people need to be able to maintain with ease.</p>

<p><a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code &ndash; Amazon</a></p>

<h3>CoffeeScript Cookbook</h3>

<p>Just started reading through this online when I was learning CoffeeScript last week. Some great examples well laid
out of all the different constructs and how they translate into Javascript. Along with the <a href="http://coffeescript.org/">CoffeeScript website</a>,
you should be up and running in CoffeeScript in no time.</p>

<p><a href="http://coffeescriptcookbook.com/">CoffeeScript Cookbook</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compass Sass]]></title>
    <link href="http://madole.github.io/blog/2014/07/13/compass-sass/"/>
    <updated>2014-07-13T00:00:00+10:00</updated>
    <id>http://madole.github.io/blog/2014/07/13/compass-sass</id>
    <content type="html"><![CDATA[<pre><code>---
</code></pre>

<p>layout: post
title: &ldquo;Compass &ndash; SASS &ndash; Boostrap SASS&rdquo;
date: 2014-07-13 21:25:58 +1000
comments: true</p>

<h2>categories: [&lsquo;SASS&rsquo;, &lsquo;Bootstrap&rsquo;, &lsquo;Compass&rsquo;, &lsquo;Ruby&rsquo;, &lsquo;Scout&rsquo;, &lsquo;CSS&rsquo;] </h2>

<p>About a month ago, we decided to use SASS on our side project because we wanted to learn some of the new ways to
pre-process CSS. I have used LESS before (which is a Node.js preprocessor) in a work project so it makes sense
to use something different for this learning experience. We then boiled down the choices to just two, SASS or Stylus.</p>

<!--more-->


<p>
We chose SASS and I got down to doing some research. I learned it was built on Ruby, I also learned that a lot of people
who use SASS also use Compass as it provides a bunch of mixins that are pretty handy when you come to writing
your SASS. We wanted to use Bootstrap but at that point we weren&rsquo;t aware of the Bootstrap-SASS port, and it was only officially
written in CSS and LESS.</p>

<p>I had looked into using SASS alongside the CSS version of Bootstrap but then one day when browsing GitHub, I came
across the Bootstrap-SASS official port.
Another layer of complexity to this learning experience but sure where&rsquo;s the fun if you&rsquo;re not jumping in at the deep end.</p>

<p>I decided that as I was researching how to get set up with Compass, SASS and Bootstrap SASS for the first time,
I would document it in a presentation form. This as a) for me because my memory is terrible and b) for my team mates
so they wouldn&rsquo;t have to make the mistakes I did.</p>

<p>I&rsquo;ve included this presentation in a PDF format below so take a look, have a play about and leave me some feedback so
I can make this as useful as possible for others just starting out with these tools too</p>

<p><a href="http://madole.github.io/assets/pdfs/compass-sass-getting-started.pdf">Compass SASS &ndash; Get started with the awesome</a></p>
]]></content>
  </entry>
  
</feed>
